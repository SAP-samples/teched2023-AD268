'use strict';

var requests = require('@sap/xssec').requests;

const MILISECOND = 1000;
const SECOND = 1 * MILISECOND;
const MIN_TOKEN_VALIDITY_SECONDS = require('./constants').MIN_TOKEN_VALIDITY_SECONDS;

module.exports = TokenHandler;

function TokenHandler(options) {
  this._options = {
    credentials: options
  };
  this._options.timeout = 5000;
  this._cached = null;
}

TokenHandler.prototype.getToken = function (cb) {
  let self = this;
  if (self._cached) {
    if (self._cached.expiryTime - Date.now() > MIN_TOKEN_VALIDITY_SECONDS * SECOND) {
      return cb(null, self._cached.token);
    }
  }

  requests.requestClientCredentialsToken(null, this._options, null, null, (err, accessToken, token) => {
    if (err) {
      return cb(err);
    }

    if (token && token.expires_in) {
      self._cached = {
        token: accessToken,
        expiryTime: Date.now() + (token.expires_in * SECOND)
      };
    }

    cb(null, accessToken);
  });
};