'use strict';

var path = require('path');
var TextBundle = require('./TextBundle');
var utils = require('./utils');

module.exports = ResourceManager;

/**
 * @classdesc ResourceManager class manages a collection of localized text bundles
 * @param {string} basePath Base path of the localized text resource files
 * @property {Logger} logger Logger object which can be injected on the ResourceManager instance. It should have a bunyan/sap-json-logging compatible API.
 * @constructor
 */
function ResourceManager(basePath) {
    var caller;
    if (!basePath || typeof basePath !== 'string') {
        throw new TypeError('Missing or invalid base property file path.');
    }
    if (!path.isAbsolute(basePath)) {
        caller = utils.callerLocation(1);
        basePath = path.resolve(path.dirname(caller), basePath);
    }
    this._basePath = basePath;
    this._textBundles = {};
    this._pendingLocales = {};
}

ResourceManager.prototype.logger = require('./defaultLogger');

/**
 * Returns a TextBundle for a given locale
 * @param {string} locale
 * @returns {TextBundle}
 */
ResourceManager.prototype.getTextBundle = function (locale) {
    locale = locale || 'en';
    var bundle = this._textBundles[locale];
    if (!bundle) {
        if (this.warnOnUnloadedBundle) {
            this.logger.warn(new Error('Accessing unloaded TextBundle, consider calling loadTextBundle instead'));
        }
        bundle = new TextBundle({
            path: this._basePath,
            locale: locale
        });
        this._textBundles[locale] = bundle;
    }
    return bundle;
};

/**
 * Retrieves a TextBundle for a given locale. Resources for the locale are loaded if they are not yet available.
 * @param {string} locale
 * @returns {Promise} Promise eventually fulfilled to a TextBundle for the requested locale
 */
ResourceManager.prototype.loadTextBundle = function (locale) {
    locale = locale || 'en';
    var self = this,
        textBundle = this._textBundles[locale],
        loading;
    self.logger.trace('Retrieving text bundle for locale %s', locale);
    if (textBundle) {
        return Promise.resolve(textBundle);
    }
    // Check if resources are already being loaded for this locale
    loading = this._pendingLocales[locale];
    if (!loading) {
        self.logger.info('Loading resources for locale %s', locale);
        loading = new Promise(
            function (resolve) {
                resolve(new TextBundle({
                    path: self._basePath,
                    locale: locale
                }));
            })
            .then(function (bundle) {
                return bundle.load();
            })
            .then(function (bundle) {
                self._textBundles[locale] = bundle;
                return bundle;
            })
            .catch(function (err) {
                self.logger.error(err, 'Failed to load resources for locale %s', locale);
                delete self._pendingLocales[locale];
                throw err;
            });
        this._pendingLocales[locale] = loading;
    }
    return loading;
};

/**
 * Returns a middleware function taking care of loading the resources for the request locale.
 * @param {string|function} [localeAccessor='locale'] Accessor property of function to extract the locale from the HTTP Request. Default to 'locale' (i.e. locale is req.locale)
 * @returns {Function}
 */
ResourceManager.prototype.getMiddleware = function (localeAccessor) {
    var accessor, self = this;
    localeAccessor = localeAccessor || 'locale';

    if (typeof localeAccessor === 'function') {
        accessor = localeAccessor;
    }
    else {
        accessor = function (req) {
            return req[localeAccessor];
        };
    }

    return function (req, res, next) {
        // Wrap the call to the locale accessor into a Promise to gracefully handle exceptions
        var p = new Promise(function (resolve) {
            resolve(accessor(req));
        });
        /* eslint-disable indent */
        p.then(function (locale) {
                return self.loadTextBundle(locale);
            })
            .then(function () {
                next();
            })
            .catch(function (err) {
                next(err);
            });
    };
};
