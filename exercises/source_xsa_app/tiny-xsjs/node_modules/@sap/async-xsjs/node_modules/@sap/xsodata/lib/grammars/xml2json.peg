{
    var globalNamespaces = {};

    function createNode(startTag, content) {

        var node = {};

        node[startTag.name] = {
          $attributes:    startTag.attributes,
          $namespaces:    startTag.namespaces,
        };

        if(content.length === 1 && typeof content[0] === 'string'){

           var val = content.join('');
           //var num = Number(val);

           //if(isNaN(num) === false){
           //    val = num;
           //}

           node[startTag.name].$value = val;

        } else {
           node[startTag.name].$children = content;
        }

        return node;

    }

    function createStartTag(name, attributes) {

       var attribs = processAttributes(attributes);
       return {
           name:name,
           attributes: attribs.attributes,
           namespaces: attribs.namespaces
       };

    }

    function processAttributes(attrs){

        var attributes = {};
        var namespaces = {};

        attrs.forEach(function(elem){

           for(var key in elem){

               if(elem.hasOwnProperty(key)){
                    var value = elem[key];
                    key=key.toLowerCase();

                    if(key.indexOf('xmlns') !== -1) {

                        var tmpKey = key;

                        if(tmpKey !== 'xmlns'){

                            var splitKey = tmpKey.split(':');
                            tmpKey = splitKey[1];

                            // We do not add xmlns to global namespace property
                            // This can override existing global xmlns property
                            globalNamespaces[tmpKey] = value;
                        }

                        namespaces[tmpKey] = value;

                    } else {

                        attributes[key] = value;

                    }
               }
           }

        });

        return {
            attributes : attributes,
            namespaces: namespaces
        }
    }
}

Document        = OWS XmlHeader* OWS doc:Content
                {
                    return {
                     document: doc,
                     namespaces: globalNamespaces
                    };

                }

XmlHeader       = "<?xml" OWS "version=" quotedstring OWS "encoding=" quotedstring OWS "?>" OWS

Content         = (Element / Text)*

Element         = OWS startTag:sTag content:Content endTag:eTag OWS
                  {
                    if (startTag.name != endTag.name) {
                        throw new Error("Expected </" + startTag.name + "> but </" + endTag.name + "> found.");
                    }

                    return createNode(startTag, content);

                  }
                  / OWS startTag:selfTag OWS
                  {
                      return createNode(startTag, []);
                  }

sTag            = "<" name:TagName attr:attributes* ">"
                  {
                    return createStartTag(name, attr);
                  }

selfTag         = "<" name:TagName attr:attributes* "/>"
                  {
                    return createStartTag(name, attr);
                  }

eTag            = "</" name:TagName ">"
                  {
                    return {
                        name:name
                    };
                  }

TagName         = chars:[a-z-A-Z:.\-_]+
                  {
                    return chars.join("");
                  }

Numbers           = numberData:[0-9]+
                  {
                    var nums = numberData.join("");
                    return Number(nums);
                  }

Text            = chars:[^<]+
                  {
                    return chars.join("");
                  }

attributes      = OWS key:attributeKey OWS "=" OWS val:quotedstring
                  {
                    var ret = {};
                    ret[key] = val;
                    return ret;
                  }

attributeKey    = key:[a-zA-Z0-9_\.\-\:+#@$]+
                  {
                    return key.join('');
                  }

quotedstring    = quote n:notquote* quote
                  {
                    return n.join('');
                  }

string          = a:apha_num*
                  {
                    return a.join('');
                  }

apha_num        = !(sep / ";") char: .
                  {
                    return char
                  }

OWS             = sep*;

MWS             = sep+;

notquote        = !(quote) a: anyCharacter
                  {
                    return a;
                  }

noquotenoslash  = !(quote/"/") anyCharacter

sep             = whiteSpace / lineTerminator / enclosedComment / lineComment

whiteSpace      = [\t\v\f \u00A0\uFEFF]

lineTerminator  = [\n\r]

quote           = "\""

enclosedComment = "/*" (!"*/" anyCharacter)* "*/"

lineComment     = "//" (!lineTerminator anyCharacter)*

anyCharacter    = .

EOF             = !.
