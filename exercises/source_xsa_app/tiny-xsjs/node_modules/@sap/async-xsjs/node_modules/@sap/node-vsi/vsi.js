// Copyright (c) 2016, Markus Strehle
// All rights reserved.
//
//
// Load bindings binary
//

var vsa = process.env['VSA_LIB'];
var depsPath = '';
if (process.platform === "win32") {
   process.env['VSI_LIB'] =  __dirname + '\\deps\\win32\\' + process.arch + '\\sapvsi.dll';
   process.env['VSA_TEST'] =  __dirname + '\\deps\\win32\\' + process.arch + '\\sapcsa.dll';
   process.env['PATH'] = process.env['PATH'] + ';' + __dirname + '\\deps\\' + process.platform + '\\' + process.arch;
   depsPath = __dirname + '\\deps\\' + process.platform + '\\' + process.arch;
} else {
   if (process.platform === "darwin") {
     process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch;
     process.env['VSI_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapvsi.dylib';
     process.env['VSA_TEST'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcsa.dylib';
     depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch;
   } else {
    if( process.arch === 'ppc64' ) {
        var os = require('os');
        var endianer = os.endianness().toLowerCase();
        if( endianer === 'le' ) {
            process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer;
            process.env['VSI_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer + '/libsapvsi.so';
            process.env['VSA_TEST'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer + '/libsapcsa.so';
            depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch + endianer;
        } else {
            process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch;
            process.env['VSI_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapvsi.so';
            process.env['VSA_TEST'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcsa.so';
            depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch;
        }
    } else {
        process.env['LD_LIBRARAY_PATH'] =  __dirname + '/deps/' + process.platform + '/' + process.arch;
        process.env['VSI_LIB'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapvsi.so';
        process.env['VSA_TEST'] =  __dirname + '/deps/' + process.platform + '/' + process.arch + '/libsapcsa.so';
        depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch;
    }
   }
}

if (process.sapvsilib) {
    return module.exports = process.sapvsilib;
}
var fs = require('fs'), path = require('path');

// Seed random numbers [gh-82]
Math.random();

// Look for binary for this platform
var v8 = 'v8-'+ /[0-9]+\.[0-9]+/.exec(process.versions.v8)[0];
var binArch = process.platform+ '-'+ process.arch;
if( process.arch === 'ppc64' ) {
	if( endianer === 'le' ) {
        binArch = process.platform+ '-'+ process.arch + endianer;
	}
}
var binPath = path.join(__dirname, 'bin', binArch+ '-'+ v8);
var modPath = path.join(binPath, 'vsi');
try {
	fs.statSync(modPath+ '.node');
} catch (ex) {
	// No binary!
	throw ex;
	//throw new Error('`'+ modPath+ '.node` is missing. Try reinstalling `node-vsi`?');
}

// Remove unrelated native platform libraries
const removeDirectory = function (dir) {
    if (fs.existsSync(dir)) {
        fs.readdirSync(dir).forEach((file, index) => {
            const curPath = path.join(dir, file);
            if (fs.lstatSync(curPath).isDirectory()) { // recurse
                removeDirectory(curPath);
            } else { // delete file
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(dir);
    }
};
const getSubDirs = function (dir) {
    const isDirectory = source => fs.lstatSync(source).isDirectory();
    const getDirectories = source =>
        fs.readdirSync(source).map(name => path.join(source, name)).filter(isDirectory);
    return getDirectories(dir);
};
if (process.env['HDB_NODE_PLATFORM_CLEAN'] === '1' || process.env['VSI_NODE_PLATFORM_CLEAN'] === '1') {
    var pb_path_all = getSubDirs(path.join(__dirname, 'bin'));
    pb_path_all.forEach((pbPath) => {
        if (pbPath.indexOf(binArch) === -1) {
            try {
                removeDirectory(pbPath);
            } catch (ex) {
            }
        }
    });
    var deps_path_all = getSubDirs(path.join(__dirname, 'deps'));
    deps_path_all.forEach((pbPath) => {
        if (!pbPath.endsWith(process.platform)) {
            try {
                removeDirectory(pbPath);
            } catch (ex) {
            }
        }
    });
    deps_path_all = getSubDirs(path.join(__dirname, 'deps', process.platform));
    deps_path_all.forEach((pbPath) => {
        if (pbPath !== depsPath) {
            try {
                removeDirectory(pbPath);
            } catch (ex) {
            }
        }
    });
}
// Pull in VSI implementation
process.sapvsilib = module.exports = require(modPath);
