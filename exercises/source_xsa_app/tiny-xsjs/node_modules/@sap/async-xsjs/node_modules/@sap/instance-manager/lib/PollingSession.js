'use strict';

var format = require('util').format;

module.exports = PollingSession;
const stepMillis = 500;

function PollingSession(tenant, intervalMillis, timeoutSeconds) {
  this._tenant = tenant;
  this._sessionElapsedMillis = 0;
  this._intervalMillis = intervalMillis;
  this._timeoutMillis = timeoutSeconds * 1000;
  this._countCalls = 0;
}

PollingSession.prototype.poll = function (fnGetState, fnEvalState, callback) {
  this._genericPolling(Date.now(), fnGetState, fnEvalState, callback);
};

PollingSession.prototype._genericPolling = function (startTime, fnGetState, fnEvalState, cb) {
  var self = this;

  self._intervalMillis += stepMillis * self._countCalls;
  self._countCalls += 1;
  fnGetState(function (err, state) {
    if (err) {
      return cb(err);
    }

    var thisPollingElapsedMillis = Date.now() - startTime;

    var result = fnEvalState(state);
    if (result.err) {
      self._sessionElapsedMillis += thisPollingElapsedMillis;
      return cb(result.err);
    }

    if (result.ok) {
      self._sessionElapsedMillis += thisPollingElapsedMillis;
      return cb(null, result.data);
    }

    if (thisPollingElapsedMillis >= self._timeoutMillis || (self._sessionElapsedMillis + thisPollingElapsedMillis) >= self._timeoutMillis) {
      return cb(new Error(format("Timeout: more than %d millis have passed during polling instance for tenant '%s'", self._timeoutMillis, self._tenant)));
    }
    setTimeout(function () {
      self._genericPolling(startTime, fnGetState, fnEvalState, cb);
    }, self._intervalMillis);
  });
};
