'use strict';

var format = require('util').format;
var Cache = require('lru-cache');
var userInput = require('./user-input');
var Resources = require('./Resources');
var TokenHandler = require('./TokenHandler');
var pollingControl = require('../polling-control');
var ERRORS = require('./constants').ERRORS;
var HTTP = require('./constants').STATUS.HTTP;
var STATE = require('./constants').RESOURCE.STATE;
var isPlainObject = require('../utils').isPlainObject;
var processSmErrorsPropertyValue = require('./utils').processSmErrorsPropertyValue;

module.exports = Client;

function Client(options) {
  var opts = userInput.processMainOptions(options);
  this._tokenHandler = new TokenHandler(options);
  this._resources = new Resources(options, this._tokenHandler);
  this._cache = new Cache({ max: opts.cache_max_items, maxAge: (opts.cache_item_expire_seconds * 1000) });
}

Client.prototype.getServiceOffering = function (name, cb) {
  let offeringsResource;
  let self = this;
  if (self._cache.get('offerings_resource')) {
    offeringsResource = self._cache.get('offerings_resource');
  } else
  {
    offeringsResource = self._resources.serviceOfferings();
    self._cache.set('offerings_resource', offeringsResource);
  }
  var query = { fieldQuery: format("catalog_name eq '%s'", name) };
  self._fetchOne(offeringsResource, query, cb);
};

Client.prototype.getServicePlan = function (name, serviceOfferingId, cb) {
  let servicePlanResource;
  let self = this;
  if (self._cache.get('service_plan_resource')) {
    servicePlanResource = self._cache.get('service_plan_resource');
  } else {
    servicePlanResource = self._resources.servicePlans();
    self._cache.set('service_plan_resource', servicePlanResource);
  }
  var query = { fieldQuery: format("catalog_name eq '%s' and service_offering_id eq '%s'", name, serviceOfferingId) };
  self._fetchOne(servicePlanResource, query, cb);
};

Client.prototype.createInstance = function (options, polling, cb) {
  var resource = this._resources.instances();
  this._createWithPolling(resource, options, polling, cb);
};

Client.prototype.getInstances = function(query, cb) {
  var resource = this._resources.instances();
  resource.list(query, cb);
};

Client.prototype.createBinding = function (options, polling, cb) {
  var resource = this._resources.bindings();
  this._createWithPolling(resource, options, polling, cb);
};

Client.prototype.getBindingById = function (id, cb) {
  var resource = this._resources.bindings();
  resource.fetch(id, cb);
};

Client.prototype.getBindings = function (query, cb) {
  var resource = this._resources.bindings();
  resource.list(query, cb);
};

Client.prototype.deleteBinding = function (bindingId, polling, cb) {
  var resource = this._resources.bindings();
  this._deleteWithPolling(resource, bindingId, polling, cb);
};

Client.prototype.getInstanceByName = function (name, cb) {
  var resource = this._resources.instances();
  this._getByName(resource, name, cb);
};

Client.prototype.deleteInstance = function (instanceId, polling, cb) {
  var resource = this._resources.instances();
  this._deleteWithPolling(resource, instanceId, polling, cb);
};

Client.prototype._fetchOne = function (resource, query, cb) {
  resource.list(query, function (err, arr) {
    if (err) {
      return cb(err);
    }

    if (arr.length !== 1) {
      return cb(new Error(format('%d items found when querying %s with %s', arr.length, resource.getType(), JSON.stringify(query))));
    }

    cb(null, arr[0]);
  });
};

Client.prototype._getByName = function (resource, name, cb) {
  resource.list({ fieldQuery: format("name eq '%s'", name) }, function (err, arr) {
    if (err) {
      return cb(err);
    }

    if (arr.length === 0) {
      return cb(null, null);
    }

    cb(null, arr[0]);
  });
};

Client.prototype._createWithPolling = function (resource, options, polling, cb) {
  resource.create(options, function (err, operationPath) {
    if (err) {
      return cb(err);
    }

    polling.poll(resource.getOperation.bind(resource, operationPath), evaluateOperation, cb);
  });
};

Client.prototype._deleteWithPolling = function (resource, id, polling, cb) {
  resource.delete(id, function (err, operationPath) {
    if (err) {
      return cb(err);
    }

    polling.poll(resource.getOperation.bind(resource, operationPath), evaluateOperation, cb);
  });
};

function evaluateOperation(operation) {
  if (operation.state === STATE.IN_PROGRESS) {
    return pollingControl.continue();
  }

  if (operation.state === STATE.SUCCEEDED) {
    return pollingControl.ok(operation);
  }

  return pollingControl.error(reportNotValidState(operation), determineStatusCode(operation));
}

function reportNotValidState(operation) {
  return format('State of %s operation is %s (resource type: %s, resource id: %s, operation id: %s), %s',
    operation.type, operation.state, operation['resource_type'], operation['resource_id'], operation.id,
    processSmErrorsPropertyValue(operation.errors));
}

function determineStatusCode(operation) {
  if (isPlainObject(operation.errors)) { // we can make conclusions only if there is a single error
    if (operation.errors.error === ERRORS.CONFLICT) {
      return HTTP.CONFLICT;
    }
  }
}
