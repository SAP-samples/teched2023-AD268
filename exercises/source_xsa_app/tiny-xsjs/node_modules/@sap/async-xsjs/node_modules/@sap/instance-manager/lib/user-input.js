'use strict';

var clone = require('clone');
var utils = require('./utils');

module.exports = {
  processMainOptions: processMainOptions,
  processOptionalParameters: processOptionalParameters,
  processTenant: processTenant
};

function processMainOptions(options) {
  var opts = clone(options);
  validateMainOptions(opts);
  setMainOptionsDefaults(opts);
  return opts;
}

function validateMainOptions(options) {
  if (!utils.isObject(options)) {
    throw new Error('Options should be an object');
  }

  ['polling_interval_millis'].forEach(function (property) {
    utils.validateNonNegativeInteger(options, property);
  });

  ['polling_timeout_seconds', 'cache_max_items', 'cache_item_expire_seconds'].forEach(function (property) {
    utils.validatePositiveInteger(options, property);
  });
}

function setMainOptionsDefaults(options) {
  options['cache_max_items'] = options['cache_max_items'] || 500;
  options['cache_item_expire_seconds'] = options['cache_item_expire_seconds'] || (10 * 60);

  options['polling_interval_millis'] = utils.isDefined(options['polling_interval_millis']) ? options['polling_interval_millis'] : 300;
  options['polling_timeout_seconds'] = options['polling_timeout_seconds'] || 120;
}

function processOptionalParameters(optionalParameters) {
  if (!optionalParameters) {
    return;
  }
  if (!utils.isPlainObject(optionalParameters)) {
    throw new Error('"optionalParameters" must be an object');
  }
  return optionalParameters;
}

function processTenant(tenant) {
  if (typeof tenant !== 'string') {
    throw new Error('Tenant should be a string');
  }
  tenant = tenant.trim();
  if (!tenant.length) {
    throw new Error('Tenant cannot be an empty string');
  }
  return tenant;
}
