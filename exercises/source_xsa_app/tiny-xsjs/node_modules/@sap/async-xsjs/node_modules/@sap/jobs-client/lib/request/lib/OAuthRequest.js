const RetryRequest = require('./RetryRequest');

/*
Executing oauth based http(s) requests.

```js
const OAuthRequest = require('@sap/cf-scheduler-utils').OAuthRequest;

const options = {
   url: 'https://any-url.tld/path?any=queryString',
   oauth: {
       clientId: '...',
       clientSecret: '...'
       tokenUrl: '.../oauth/token'
   }
}

try{
    const response = await new OAuthRequest(options).execute();
} catch(error){
    // handle error;
    if(error.response){
        // log response data
    }
}
``` */
class OAuthRequest extends RetryRequest {

    /**
     * Executes an oauth request. If clientId, clientSecret and tokenUrl are provided an
     * access token is obtained automatically.
     *
    * @param  {object} options - The request options. See Request
    * @param  {string} [options.oauth] - Providing authentication mechanim
    * @param  {string} [options.oauth.bearer] - Provides the plain bearer access token and sets the Auhtorization header
    * @param  {string} [options.oauth.clientId] - The client id to get an access token
    * @param  {string} [options.oauth.clientSecret] - The client secret to get an access token
    * @param  {string} [options.oauth.tokenUrl] - The token url to get an access token from
    * @see Request
    */
    constructor(options) {

        super(options);

        if (options.oauth && options.oauth.bearer) {
            this._accessToken = options.oauth.bearer;
        }
    }

    async getAccessToken() {

        if (this._accessToken) return this._accessToken;

        const oauth = this.getOptions().oauth;
        if (!oauth) return undefined;

        const authReqOptions = {
            method: 'POST',
            url: oauth.url || oauth.providerUrl || oauth.tokenUrl,
            form: {
                client_id: oauth.clientId || oauth.client_id,
                client_secret: oauth.clientSecret || oauth.client_secret,
                grant_type: oauth.grantType || oauth.grant_type || 'client_credentials'
            }
        };

        const response = await new RetryRequest(authReqOptions).execute();
        if (response && response.body) {
            this._accessToken = response.body.access_token || response.body.accessToken || response.body.accesstoken;
        }
        return this._accessToken;
    }

    _setAuthorizationOAuthHeader(token) {
        if (!token) return this;
        const options = this.getOptions();
        if (!options.headers) options.headers = {};
        options.headers.Authorization = `bearer ${token}`;
        return this;
    }
    /**
     * Executes the request
     *
     * @returns {object} response - The http response
     * @throws Throws an error if the request fails. the error may has an .response property.
     */
    async execute() {
        const token = await this.getAccessToken();
        if (token) {
            this._setAuthorizationOAuthHeader(token);
        }
        return await super.execute();
    }
}

module.exports = OAuthRequest;

