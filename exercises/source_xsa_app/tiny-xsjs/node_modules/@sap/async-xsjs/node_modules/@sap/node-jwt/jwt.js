// Copyright (c) 2016, Markus Strehle, SAP SE
// All rights reserved.
//
//
// Load bindings binary
//
var sapjwt_lib_name;
var depsPath = '';
if (process.platform === "win32") {
  sapjwt_lib_name =  __dirname + '\\deps\\win32\\' + process.arch + '\\sapjwt.dll';
}

if (process.sapjwtlib) {
    module.exports = process.sapjwtlib;
} else {
  var fs = require('fs'), path = require('path');

  // Seed random numbers [gh-82]
  Math.random();

  if (process.platform === "win32") {
    depsPath = __dirname + '\\deps\\' + process.platform + '\\' + process.arch;
    sapjwt_lib_name =  depsPath + '\\sapjwt.dll';
  } else {
    if (process.platform === "darwin") {
      depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch;
      sapjwt_lib_name =  depsPath + '/libsapjwt.dylib';
    } else {
      if( process.arch === 'ppc64' ) {
        var os = require('os');
        var endianer = os.endianness().toLowerCase();
        if( endianer === 'le' ) {
          depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch + endianer;
          sapjwt_lib_name =  __dirname + '/deps/' + process.platform + '/' + process.arch + endianer +'/libsapjwt.so';
        } else {
          depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch;
          sapjwt_lib_name =  depsPath + '/libsapjwt.so';
        }
      }else {
        depsPath = __dirname + '/deps/' + process.platform + '/' + process.arch;
        sapjwt_lib_name =  depsPath + '/libsapjwt.so';
      }
    }
  }
  // Look for binary for this platform
  var v8 = 'v8-'+ /[0-9]+\.[0-9]+/.exec(process.versions.v8)[0];
  var binArch = process.platform+ '-'+ process.arch;
  if( process.arch === 'ppc64' ) {
    var os = require('os');
    var endianer = os.endianness().toLowerCase();
    if( endianer === 'le' ) {
      binArch = process.platform+ '-'+ process.arch + endianer;
    }
  }
  var binPath = path.join(__dirname, 'bin', binArch+ '-'+ v8);
  var modPath = path.join(binPath, 'jwt');
  try {
    fs.statSync(modPath+ '.node');
  } catch (ex) {
    // No binary!
    throw ex;
    //throw new Error('`'+ modPath+ '.node` is missing. Try reinstalling `node-jwt`?');
  }
  // Remove unrelated native platform libraries
  const removeDirectory = function (dir) {
    if (fs.existsSync(dir)) {
      fs.readdirSync(dir).forEach((file, index) => {
        const curPath = path.join(dir, file);
        if (fs.lstatSync(curPath).isDirectory()) { // recurse
          removeDirectory(curPath);
        } else { // delete file
          fs.unlinkSync(curPath);
        }
      });
      fs.rmdirSync(dir);
    }
  };
  const getSubDirs = function (dir) {
    const isDirectory = source => fs.lstatSync(source).isDirectory();
    const getDirectories = source =>
        fs.readdirSync(source).map(name => path.join(source, name)).filter(isDirectory);
    return getDirectories(dir);
  };
  if (process.env['HDB_NODE_PLATFORM_CLEAN'] === '1' || process.env['JWT_NODE_PLATFORM_CLEAN'] === '1') {
    var pb_path_all = getSubDirs(path.join(__dirname, 'bin'));
    pb_path_all.forEach((pbPath) => {
      if (pbPath.indexOf(binArch) === -1) {
        try {
          removeDirectory(pbPath);
        } catch (ex) {
        }
      }
    });
    var deps_path_all = getSubDirs(path.join(__dirname, 'deps'));
    deps_path_all.forEach((pbPath) => {
      if (!pbPath.endsWith(process.platform)) {
        try {
          removeDirectory(pbPath);
        } catch (ex) {
        }
      }
    });
    deps_path_all = getSubDirs(path.join(__dirname, 'deps', process.platform));
    deps_path_all.forEach((pbPath) => {
      if (pbPath !== depsPath) {
        try {
          removeDirectory(pbPath);
        } catch (ex) {
        }
      }
    });
  }
  // Pull in JWT implementation
  var jwtValidation = require(modPath).jwtValidation;
  // Load SAPJWT library
  var jwt = new jwtValidation(sapjwt_lib_name);
  process.sapjwtlib = module.exports = jwtValidation;
}