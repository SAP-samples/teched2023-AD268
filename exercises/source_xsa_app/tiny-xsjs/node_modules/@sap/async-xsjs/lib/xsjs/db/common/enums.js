'use strict';

var _ = require('lodash');
var VError = require('verror');
var driverEnum = require('@sap/hana-client/extension/Enums');
var types = require('@sap/hana-client/extension/TypeCode');

var XSC_ISOLATION = {
  READ_COMMITTED: 2,
  REPEATABLE_READ: 4,
  SERIALIZABLE: 8
};

var XSC_TO_DRIVER_ISOLATION = {};
XSC_TO_DRIVER_ISOLATION[XSC_ISOLATION.READ_COMMITTED] = driverEnum.READ_COMMITTED;
XSC_TO_DRIVER_ISOLATION[XSC_ISOLATION.REPEATABLE_READ] = driverEnum.REPEATABLE_READ;
XSC_TO_DRIVER_ISOLATION[XSC_ISOLATION.SERIALIZABLE] = driverEnum.SERIALIZABLE;

var XSC_PARAM_MODE = {
  IN: 1,
  INOUT: 2,
  OUT: 4
};

var DRIVER_TO_XSC_PARAM_MODE = {};
DRIVER_TO_XSC_PARAM_MODE[driverEnum.DD_INPUT] = XSC_PARAM_MODE.IN;
DRIVER_TO_XSC_PARAM_MODE[driverEnum.DD_INPUT_OUTPUT] = XSC_PARAM_MODE.INOUT;
DRIVER_TO_XSC_PARAM_MODE[driverEnum.DD_OUTPUT] = XSC_PARAM_MODE.OUT;


function findCorresponding(map, key) {
  var value = map[key];
  if (_.isNil(value)) {
    throw new VError('Cannot find property %s in %j', key, map);
  }
  return value;
}

function createXscTypesConst() {
  var xscTypes = _.clone(types);
  xscTypes.INTEGER = xscTypes.INT;
  xscTypes.VARCHAR = xscTypes.VARCHAR1;
  xscTypes.SMALLDECIMAL = 47;
  return xscTypes;
}

function toXscType(type) {
  if (type === types.DAYDATE) {
    return types.DATE;
  }
  if (type === types.SECONDTIME) {
    return types.TIME;
  }
  if (type === types.LONGDATE) {
    return types.TIMESTAMP;
  }
  return type;
}

function toXscTypeName(typeName) {
  if (typeName === 'INT') {
    return 'INTEGER';
  }
  if (typeName === 'VARCHAR1') {
    return 'VARCHAR';
  }
  if (typeName === 'DAYDATE') {
    return 'DATE';
  }
  if (typeName === 'SECONDTIME') {
    return 'TIME';
  }
  if (typeName === 'LONGDATE') {
    return 'TIMESTAMP';
  }
  return typeName;
}

module.exports = {
  isolationLevel: {
    XSC: XSC_ISOLATION
  },
  types: {
    XSC: createXscTypesConst()
  },

  convert: {
    toDriverIsolationLevel: findCorresponding.bind(null, XSC_TO_DRIVER_ISOLATION),
    toXscParameterMode: findCorresponding.bind(null, DRIVER_TO_XSC_PARAM_MODE),
    toXscType,
    toXscTypeName
  }
};
