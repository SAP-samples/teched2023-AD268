'use strict';

var enums = require('../common/enums');
var TypeCode = require('@sap/hana-client/extension/TypeCode');
var isString = require('lodash').isString;

module.exports = ResultSetMetaData;

function ResultSetMetaData(columns) {
  this._columns = columns;
}

/**
 * Returns the number of the columns in the result set
 * @returns {integer} The number of the columns in the result set
 * @throws Throws an error if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getColumnCount = function () {
  return this._columns.length;
};

/**
 * Returns the type of the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {db.types} The type of the column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getColumnType = function (columnIndex) {
  return enums.convert.toXscType(this._columns[columnIndex - 1].nativeType);
};

/**
 * Returns the name of the specified column type
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {string} The name of the column type
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getColumnTypeName = function (columnIndex) {
  var nativeTypeName = this._columns[columnIndex - 1].nativeTypeName;

  if (!isString(nativeTypeName)) {
    nativeTypeName = Object.keys(TypeCode).find(key => TypeCode[key] === nativeTypeName);
  }

  return enums.convert.toXscTypeName(nativeTypeName);
};

/**
 * Returns the name of the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {string} The name of the specified column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getColumnName = function (columnIndex) {
  return this._columns[columnIndex - 1].originalColumnName;
};

/**
 * Returns the alias or name of the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {string} The alias or name of the specified column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getColumnLabel = function (columnIndex) {
  return this._columns[columnIndex - 1].columnName;
};

/**
 * Returns the catalog name for the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {string} The catalog name for the specified column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getCatalogName = function () {
  throw new Error('Not implemented');
};

/**
 * Returns the table name for the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {string} The table name for the specified column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getTableName = function (columnIndex) {
  return this._columns[columnIndex - 1].tableName;
};

/**
 * Returns the precision of the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {integer} The precision of the specified column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getPrecision = function (columnIndex) {
  return this._columns[columnIndex - 1].precision;
};

/**
 * Returns the column display size of the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {integer} The column display size of the specified column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getColumnDisplaySize = function () {
  throw new Error('Not implemented');
};

/**
 * Returns the scale of the specified column
 * @param {integer} columnIndex The index of the column in the result set <b>starting from 1</b>
 * @returns {integer} The scale of the specified column
 * @throws Throws an error on invalid parameters or if the object the method is being called on is not valid.
 */
ResultSetMetaData.prototype.getScale = function (columnIndex) {
  return this._columns[columnIndex - 1].scale;
};
