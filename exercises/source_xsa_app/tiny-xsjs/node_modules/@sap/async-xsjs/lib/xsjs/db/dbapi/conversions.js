'use strict';

var argumentsUtil = require('../common/arguments-validation');
var ctypes = require('../../../ctypes');
var _ = require('lodash');
var bufferUtils = require('../../../utils/buffer-utils');
var dateUtils = require('../../../utils/date-utils');
var types = require('@sap/hana-client/extension/TypeCode');
var VError = require('verror');
var moment = require('moment');

module.exports = {
  getInteger(value) {
    if (value === null) {
      return null;
    }

    var parsedValue = parseInt(value);
    argumentsUtil.validateParsedInteger(parsedValue, value);
    argumentsUtil.validateIntegerBoundaries(argumentsUtil.INTEGER_TYPE.BIG_INT, parsedValue);
    return parsedValue;
  },

  getBigInt(value) {
    if (value === null) {
      return null;
    }

    var parsedValue = parseInt(value);
    argumentsUtil.validateParsedInteger(parsedValue, value);
    value = _.isNumber(value) ? parsedValue : value;
    return ctypes.Int64(value);
  },

  getString(value, dbType) {
    if (value === null) {
      return null;
    }

    if (bufferUtils.isBinary(value)) {
      throw new VError('Unsupported type conversion from %s to string', typeof value);
    }
    if (dbType === types.LONGDATE) {
      return dateUtils.normalizeDateTimeString(value);
    }
    return value.toString();
  },

  getBlob(value, dbType) {
    if (value === null) {
      return null;
    }
    if (dbType === types.CLOB || dbType === types.NCLOB ||
      dbType === types.TEXT || dbType === types.BINTEXT) {
      return bufferUtils.toArrayBuffer(bufferUtils.toBuffer(value));
    }
    if (!bufferUtils.isBinary(value)) {
      throw new VError('Unsupported type conversion from %s to ArrayBuffer', typeof value);
    }
    return bufferUtils.toArrayBuffer(value);
  },

  getClob(value, dbType) {
    if (value === null) {
      return value;
    }
    if (dbType === types.LONGDATE) {
      return dateUtils.normalizeDateTimeString(value);
    }
    if (_.isString(value)) {
      return value;
    }
    if (bufferUtils.isBuffer(value)) {
      return value.toString('utf8');
    }
    throw new VError('Unsupported type conversion from %s to string', typeof value);
  },

  getDate(value) {
    if (value === null) {
      return null;
    }
    argumentsUtil.validateDateValue(value);
    var dateTime = moment(value, moment.ISO_8601);
    if (!dateTime.isValid()) {
      throw new VError('Unsupported type conversion from string "%s" to a valid date object', value);
    }
    return dateTime.toDate();
  },

  getTime(value) {
    if (value === null) {
      return null;
    }
    argumentsUtil.validateDateValue(value);
    var validTimeMatch = value.match(/(\d{2}):(\d{2}):(\d{2})(\.(\d+))?/);
    if (!validTimeMatch) {
      return module.exports.getDate(value);
    }
    return new Date(-1, 11, 31, +validTimeMatch[1], +validTimeMatch[2], +validTimeMatch[3], 0);
  },

  getDecimal(value) {
    if (value === null) {
      return null;
    }
    var parsedValue = parseFloat(value);
    if (_.isNaN(parsedValue)) {
      throw new VError('Unsupported type conversion from %s to number. Not a valid number value: "%s"', typeof value, value);
    }
    return parsedValue;
  }
};
