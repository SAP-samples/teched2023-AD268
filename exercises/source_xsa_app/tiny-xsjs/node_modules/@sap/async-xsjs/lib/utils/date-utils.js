'use strict';

const FRACTIONAL_SECONDS_DIGITS = {
  JS_DATE: 3,
  STRING: 7
};

module.exports = {
  dateToJsDate: dateToJsDate,
  timeToJsDate: timeToJsDate,
  dateTimeToJsDate: dateTimeToJsDate,
  normalizeDateTimeString: normalizeDateTimeString
};

function dateToJsDate(date, treatAsUTC) {
  return createDateObject({
    year: date.substring(0, 4),
    month: parseInt(date.substring(5, 7)) - 1,
    day: date.substring(8),
    hour: 0,
    minute: 0,
    second: 0,
    millis: 0
  }, treatAsUTC);
}

function timeToJsDate(time, treatAsUTC) {
  return createDateObject({
    year: 0,
    month: 0,
    day: 0,
    hour: time.substring(0, 2),
    minute: time.substring(3, 5),
    second: time.substring(6),
    millis: 0
  }, treatAsUTC);
}

function dateTimeToJsDate(dateTime, treatAsUTC) {
  var targetLength = FRACTIONAL_SECONDS_DIGITS.JS_DATE;
  var millis = dateTime.substring(20);
  if (millis.length < targetLength) {
    millis += '0'.repeat(targetLength - millis.length);
  } else if (millis.length > targetLength) {
    millis = millis.substring(0, targetLength);
  }

  return createDateObject({
    year: dateTime.substring(0, 4),
    month: parseInt(dateTime.substring(5, 7)) - 1,
    day: dateTime.substring(8, 10),
    hour: dateTime.substring(11, 13),
    minute: dateTime.substring(14, 16),
    second: dateTime.substring(17, 19),
    millis: millis
  }, treatAsUTC);
}

function createDateObject(values, treatAsUTC) {
  var date;
  if (treatAsUTC) {
    date = new Date(Date.UTC(values.year,
      values.month,
      values.day,
      values.hour,
      values.minute,
      values.second,
      values.millis));
  } else {
    date = new Date(values.year,
      values.month,
      values.day,
      values.hour,
      values.minute,
      values.second,
      values.millis);
  }

  // Workaround: two-digit years map to 1900-1999 which is not desired
  if (values.year >= 0 && values.year < 100) {
    if (treatAsUTC) {
      date.setUTCFullYear(values.year);
    } else {
      date.setFullYear(values.year);
    }
  }

  return date;
}

function normalizeDateTimeString(dateTime) {
  var parts = dateTime.split('.');
  if (parts.length === 1) {
    return dateTime;
  }

  var fractionalSeconds = parts[1];
  var targetLength = FRACTIONAL_SECONDS_DIGITS.STRING;
  if (fractionalSeconds.length <= targetLength) {
    return dateTime;
  }

  return parts[0] + '.' + parts[1].substring(0, targetLength);
}
