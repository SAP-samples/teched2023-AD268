'use strict';

var assert = require('assert');
var moment = require('moment');

module.exports = Logs;

function Logs(scheduler, scheduleId, jobId) {
  assert(scheduler, 'Missing scheduler');
  assert(scheduleId, ' Missing scheduleId');
  assert(jobId, 'Missing jobId');

  Object.defineProperty(this, 'scheduleId', {
    enumerable: false,
    value: scheduleId
  });
  Object.defineProperty(this, 'jobId', {
    enumerable: false,
    value: jobId
  });
  var self = this;
  return new Promise ((resolve) => {
    fetchJobSchedulePromise(scheduler, {
      jobId: self.jobId,
      scheduleId: self.scheduleId,
      displayLogs: true
    })
    .then((body) => {
      var resolvedLogs = body.logs.map(function (jlog) {
        var host = null;
        var port = null;
        var status = normalizeRunStatus(jlog.runStatus, jlog.runState);
        return new JobLogObject(
          jlog.scheduleTimestamp,
          status,
          status === 'ERROR' ? jlog.runText : null,
          jlog.executionTimestamp,
          jlog.completionTimestamp,
          host,
          port,
          jlog.action,
          jlog.user,
          jlog.locale);
      });
      self.jobLog = resolvedLogs;
      // self.jobLogs = resolvedLogs;
      resolve(self);
    });
  });
}

function getTimeValue(value) {
  if (value !== null && typeof value !== 'undefined') {
    return moment(value, moment.ISO_8601).toDate();
  }
  return null;
}

function JobLogObject(plannedTime, status, errorMessage, startedAt, finishedAt, host, port, action, user, locale) {
  Object.defineProperty(this, 'planned_time', {
    enumerable: true,
    value: getTimeValue(plannedTime),
    writable: false
  });
  Object.defineProperty(this, 'status', {
    enumerable: true,
    value: status,
    writable: false
  });
  Object.defineProperty(this, 'error_message', {
    enumerable: true,
    value: errorMessage,
    writable: false
  });
  Object.defineProperty(this, 'started_at', {
    enumerable: true,
    value: getTimeValue(startedAt),
    writable: false
  });
  Object.defineProperty(this, 'finished_at', {
    enumerable: true,
    value: getTimeValue(finishedAt),
    writable: false
  });
  Object.defineProperty(this, 'host', {
    enumerable: true,
    value: host,
    writable: false
  });
  Object.defineProperty(this, 'port', {
    enumerable: true,
    value: port,
    writable: false
  });
  Object.defineProperty(this, 'action', {
    enumerable: true,
    value: action,
    writable: false
  });
  Object.defineProperty(this, 'user', {
    enumerable: true,
    value: user,
    writable: false
  });
  Object.defineProperty(this, 'locale', {
    enumerable: true,
    value: locale,
    writable: false
  });
}

function normalizeRunStatus(status, state) {
  switch (status) {
  case 'RUNNING': return 'RUNNING';
  case 'COMPLETED': return state === 'REQUEST_ERROR' ? 'ERROR' : state;
  default: return state;
  }
}

function fetchJobSchedulePromise(scheduler, req) {
  return new Promise ((resolve, reject) => {
    scheduler.fetchJobSchedule(req, function (err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
}