'use strict';

var _ = require('lodash');
var types = require('@sap/hana-client/extension/TypeCode');
var bufferUtils = require('../../../utils/buffer-utils');
var parseTableString = require('./table-string-parser').parse;
var adaptForHdbext = require('./table-string-parser').adaptForHdbext;


module.exports = function (tracer, sqlArg, dataType) {
  if (_.isNil(sqlArg) || (_.isNumber(sqlArg) && !_.isFinite(sqlArg))) {
    return sqlArg;
  }

  if (Array.isArray(sqlArg) && dataType === 'TABLE_TYPE') {
    return sqlArg;
  }
  if (_.isString(sqlArg) && dataType === 'TABLE_TYPE') {
    return convertTableString(tracer, sqlArg);
  }

  var realType = _.isString(dataType) ? types[dataType] : dataType;
  switch (realType) {
  case types.BINARY:
  case types.VARBINARY:
    return (_.isString(sqlArg) ? bufferUtils.hexStringToBuffer(sqlArg) : bufferUtils.toBuffer(sqlArg));

  case types.ALPHANUM:
  case types.CHAR:
  case types.DECIMAL:
  case types.NCHAR:
  case types.NSTRING:
  case types.NVARCHAR:
  case types.SHORTTEXT:
  case types.STRING:
  case types.VARCHAR1:
    return toString(sqlArg);

  case types.DAYDATE:
    if (_.isString(sqlArg)) {
      return sqlArg.split(' ')[0]; // take only the year-month-day part
    }
    return sqlArg;
  case types.SECONDTIME:
    if (_.isString(sqlArg)) {
      return sqlArg.split(' ')[1]; // take only the hour:minute:second.fraction part
    }
    return sqlArg;

  default:
    return sqlArg;
  }
};

function toString(arg) {
  if (_.isString(arg)) {
    return arg;
  }
  if (bufferUtils.isBuffer(arg)) {
    return arg.toString('utf8');
  }
  return '' + arg;
}

function convertTableString(tracer, str) {
  tracer.debug('Parsing `%s` as <schema>.<table>', str);
  var parsed = parseTableString(str);
  if (parsed === null) {
    tracer.debug('Parsing `%s` as <schema>.<table> failed', str);
    throw new Error('Could not parse string `' + str + '` into <schema>.<table>');
  }
  tracer.debug('Parsing `%s` as <schema>.<table> resulted in %j', str, parsed);

  var adapted = adaptForHdbext(parsed);
  tracer.debug('Adapted <schema>.<table> for hdbext: %j', adapted);
  return adapted;
}
