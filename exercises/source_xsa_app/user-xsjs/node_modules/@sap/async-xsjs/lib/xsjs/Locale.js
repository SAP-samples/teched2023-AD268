'use strict';

var acceptLanguage = require('accept-language');

module.exports = Locale;

function Locale(req) {
  this.applicationLanguage = resolveApplicationLanguage(req);
  this.sessionLanguage = resolveSessionLanguage(req);
  this.requestLanguage = resolveRequestLanguage(req, this);
  if (!this.sessionLanguage) {
    this.sessionLanguage = this.requestLanguage;
  }
  this.dbLocale = this.requestLanguage.replace(/-/g, '_');
}

function resolveApplicationLanguage(req) {
  var appLanguage = req.cookies['xsAppLanguage'];
  return appLanguage ? appLanguage : '';
}

function resolveSessionLanguage(req) {
  // Note: In the XS Classic the $.session.language is taken from the "xsSessionLanguage" cookie.
  // If not present, it fallbacks to the locale of the HANA user
  // (which is not applicable in XS Advanced since we work with a single technical user for HANA db connections).

  return req.cookies['xsSessionLanguage'] || '';
}

function resolveRequestLanguage(req, locale) {
  var sapLang = req.headers['x-sap-request-language'];
  if (sapLang) {
    return sapLang;
  }

  // Note: Changing the value of $.application.language does not affect the value of $.request.language.
  // Thus, the value that takes part in the fallback logic is not the value of $.request.language (in the JS layer),
  // but the value of the corresponding incoming cookie ("xsAppLanguage").
  if (locale.applicationLanguage) {
    return locale.applicationLanguage;
  }

  if (locale.sessionLanguage) {
    return locale.sessionLanguage;
  }

  var languagesByPreference = acceptLanguage.parse(req.headers['accept-language']);
  if (Array.isArray(languagesByPreference) && languagesByPreference.length) {
    return languagesByPreference[0].value;
  }

  return '';
}
