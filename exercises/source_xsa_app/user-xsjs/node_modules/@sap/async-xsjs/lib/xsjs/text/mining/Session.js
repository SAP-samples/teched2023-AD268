'use strict';

var textmining = require('@sap/textmining');

module.exports = Session;

function Session($db, params) {
  this._tm = new textmining({
    client: async () => { await determineClient($db, params); },
    referenceTable: params.referenceTable,
    referenceColumn: params.referenceColumn
  });
}

Session.prototype.categorizeKNN = function (params) {
  return new Promise ((resolve, reject) => {
    this._tm.categorizeKNN(params, function(err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
};

Session.prototype.getRelatedDocuments = function (params) {
  return new Promise ((resolve, reject) => {
    this._tm.getRelatedDocuments(params, function(err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
};

Session.prototype.getRelatedTerms = function (params) {
  return new Promise ((resolve, reject) => {
    this._tm.getRelatedTerms(params, function(err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
};

Session.prototype.getRelevantTerms = function (params) {
  return new Promise ((resolve, reject) => {
    this._tm.getRelevantTerms(params, function(err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
};

Session.prototype.getRelevantDocuments = function (params) {
  return new Promise ((resolve, reject) => {
    this._tm.getRelevantDocuments(params, function(err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
};

Session.prototype.getSuggestedTerms = function (params) {
  return new Promise ((resolve, reject) => {
    this._tm.getSuggestedTerms(params, function(err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
};

Session.prototype.initialize = function (params) {
  return new Promise ((resolve, reject) => {
    this._tm.initialize(params, function(err, result) {
      if (err) { return reject(err);}
      resolve(result);
    });
  });
};

async function determineClient($db, params) {
  var conn = params.connection || await $db.getConnection();
  return conn._client;
}

