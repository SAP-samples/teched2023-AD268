'use strict';

var assert = require('assert');
var odata = require('@sap/xsodata');
var createTrace = require('../xsjs/trace/trace').createTrace;
var db = require('../xsjs/db/common/connection');
var Connection = require('../xsjs/db/dbapi/Connection');
var utils = require('../utils');
var logging = require('../logging');
var format = require('util').format;
var wrapAppError = require('../utils/errors/wrap-app-error');

module.exports = ODataService;


function ODataService(rt, rootUriPath, filePath) {
  assert(rt, 'valid runtime is required');
  assert(rootUriPath, 'valid odata root uri path is required');
  assert(filePath, 'valid xsodata file is required');

  this._rt = rt;
  this._rootUriPath = rootUriPath;
  this._filePath = filePath;
  this._handlers = {};
}

ODataService.prototype.getRootUriPath = function () {
  return this._rootUriPath;
};

ODataService.prototype.handle = function (req, res, callback) {
  assert(req, 'valid request object expected');
  assert(res, 'valid response object is expected');

  var self = this;
  var cb = callback || function () { };
  var tenant = req.authInfo && req.authInfo.getZoneId();

  this._retrieveDbOptions(req, res, function (err, hanaOptions) {
    if (err) {
      return cb(err);
    }

    var context = self._createRequestContext(req, res, hanaOptions);
    var handler = self._getHandler(tenant, hanaOptions.schema);
    handler.processRequest(req, res, context.requestOptions, function (err) {
      var clientWrapper = context.clientWrapper;
      clientWrapper.client && clientWrapper.client.close(function () { }); // ignoring an error here
      cb(err);
    });
  });
};

ODataService.prototype._getHandler = function (tenant, schema) {
  if (this._handlers[tenant]) {
    return this._handlers[tenant];
  }

  var config = {
    serviceConfiguration: this._filePath,
    defaultSchema: schema
  };
  var handler = new odata.ODataHandler(config);
  this._handlers[tenant] = handler;
  return handler;
};

ODataService.prototype._createRequestContext = function (req, res, hanaOptions) {
  var self = this;
  var rt = this._rt;
  var locale = res.locals.locale;
  var clientWrapper = { client: null };

  function retrieveClient(config, cb) {
    db.connect(hanaOptions)
      .then((client) => {
        clientWrapper.client = client;
        cb(null, client);
      })
      .catch((err) => { cb(err); });
  }

  function odataExitRunner(fnDescriptor, param, cb) {
    assert(clientWrapper.client, 'valid database client expected');
    param.connection = new Connection(clientWrapper.client);
    try {
      var jsContext = rt.createBaseContext(req, locale, { location: self._rootUriPath });
      var libId = utils.toXSObjectId(fnDescriptor.package, fnDescriptor.file);
      var thisArg = utils.createXsFunctionThisArg(jsContext);

      var xsFunctionRunner = new utils.XsJsLibFunctionRunner(rt, libId, jsContext);
      xsFunctionRunner.run(fnDescriptor.functionName, thisArg, [param])
        .then(cb)
        .catch((err) => {
          var logger = req.loggingContext.getLogger(logging.CATEGORY);
          logger.error(wrapAppError(err), format('Execution of OData exit for request "%s%s" failed', self._rootUriPath, req.path));
          cb(err);
        });
    } catch (err) {
      cb(err);
    }
  }

  var requestOptions = new odata.RequestOptions({
    functionExecutor: odataExitRunner,
    dbOpenCB: retrieveClient,
    locale: locale.dbLocale,
    logger: createTrace({ req: req, location: this._rootUriPath })
  });

  return { requestOptions: requestOptions, clientWrapper: clientWrapper };
};

ODataService.prototype.clearCache = function(tenant) {
  if (tenant) {
    delete this._handlers[tenant];
  } else {
    this._handlers = {};
  }
};

ODataService.prototype._retrieveDbOptions = function (req, res, cb) {
  var dbReqOptions = this._rt.get('hanaDbOptions').forRequest(req, res.locals.locale);
  dbReqOptions.getInstanceOptions(cb);
};
