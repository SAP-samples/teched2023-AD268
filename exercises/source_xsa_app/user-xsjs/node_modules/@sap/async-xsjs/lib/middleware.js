'use strict';

var _ = require('lodash');
var parseUrl = require('url').parse;
var parseQuery = require('querystring').parse;
var multiparty = require('multiparty');
var bodyParser = require('body-parser');
var mediaTyper = require('media-typer');
// var fibrous = require('@sap/fibrous');
var Locale = require('./xsjs/Locale');
var HttpError = require('./utils/errors/HttpError');

function getRewriteRule(rewriteRules, path) {
  rewriteRules = rewriteRules || [];
  path = path || '';
  while (path.length) {
    if (rewriteRules[path]) {
      return rewriteRules[path];
    }
    if (path === '/') {
      break;
    }
    var lastSlash = path.lastIndexOf('/');
    path =  lastSlash > 0 ? path.substring(0, lastSlash) : '/';
  }
  return [];
}

exports.urlRewrite = function (rt) {
  return function urlRewriteMiddleware(req, res, next) {
    var url = parseUrl(req.url);
    var rule = _.find(getRewriteRule(rt.rewriteRules, url.pathname), function (rule) {
      return rule.regex.test(url.pathname);
    });
    if (rule) {
      var newUrl = parseUrl(url.pathname.replace(rule.regex, rule.replacement));
      url.pathname = newUrl.pathname;
      if (newUrl.query) {
        if (url.query) {
          url.query = [newUrl.query, url.query].join('&');
        } else {
          url.query = newUrl.query;
        }
        req.query = parseQuery(url.query);
        url.search = '?' + url.query;
      }
      req.url = url.format();
      req.loggingContext.getTracer(__filename).info(
        'Applying rewrite rule: "%s" to "%s" for URL "%s" - result "%s"',
        rule.regex.source, rule.replacement, req.originalUrl, req.url
      );

    }
    next();
  };
};

exports.locale = function (req, res, next) {
  res.locals.locale = new Locale(req);
  next();
};

exports.multipartFormData = function (rt, req, res, next) {
  var form = createFormObject(rt);
  form.parse(req, function (err, fields, files) {
    if (err) {
      return next(err);
    }
    req['form-data'] = {
      fields: fields,
      files: files
    };
    next();
  });
};

function createFormObject(rt) {
  var formData = rt.get('formData');
  return new multiparty.Form({maxFilesSize: formData.maxFilesSizeInBytes});
}

exports.textBody = function (options, req, res, next) {
  var maxBodySize = (options && options.maxBodySize) || '1mb';
  var contentType = req.headers['content-type'] || 'application/octet-stream';
  var charset = mediaTyper.parse(contentType).parameters.charset;
  function done(err) {
    if (err) {
      return next(err);
    }
    if (req.is(['urlencoded'])) {
      req['form-urlencoded'] = parseQuery(req.body.toString());
    }
    next();
  }
  var bodyParserOptions = {
    limit: maxBodySize,
    type: function () { return true; }
  };
  bodyParser[charset ? 'text' : 'raw'](bodyParserOptions)(req, res, done);
};

exports.anyBody = function(rt, options) {
  return function (req, res, next) {
    if (req.is(['multipart/form-data'])) {
      return exports.multipartFormData(rt, req, res, next);
    }
    exports.textBody(options, req, res, next);
  };
};

exports.xsjs = function (rt) {
  return function contextMiddleware(req, res, next) {
    var endOfScriptName = req.path.indexOf('.xsjs') + '.xsjs'.length;
    var pathToScript = req.path.substring(0, endOfScriptName);
    res.locals.pathToScript = pathToScript;

    rt.attachContext(req, res, { location: pathToScript });
    // fibrous.middleware(req, res, next);
    next();
  };
};

exports.notFound = function (req, res, next) {
  next(new HttpError(404, 'Not Found'));
};
