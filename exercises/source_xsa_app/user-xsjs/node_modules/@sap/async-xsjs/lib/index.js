'use strict';

var bodyParser = require('body-parser');
var compress = require('compression');
var cookieParser = require('cookie-parser');
var express = require('express');
var http = require('http');
var _ = require('lodash');
var passport = require('passport');
var connOptions = require('@sap/hdbext').connectionOptions;
var xssec = require('@sap/xssec');
var createDsrMiddleware = require('@sap/e2e-trace').createDsrMiddleware;
var AuditLogger = require('./AuditLogger');
var AnonymousStrategy = require('./passport-noauth');
var middleware = require('./middleware');
var routes = require('./routes');
var runtime = require('./runtime');
var logging = require('@sap/logging');
var logger = require('./logging').logger;
var odata = require('./odata');
var jobs = require('./jobs');
var cacert = require('./cacert');

exports = module.exports = async function (options) {
  logger.info('@sap/xsjs version: %s, Node.js version: %s', require('../package.json').version, process.version);
  options = _.cloneDeep(options);
  checkOptions(options);

  cacert.loadCertificates(options);

  if (options.hana) {
    _.defaultsDeep(options, {
      hana: connOptions.getGlobalOptions()
    });
  }

  // bootstrap runtime
  var rt = await runtime.createRuntime(options);

  // configure passport
  var passportStrategies = [];

  var JWT = 'JWT';
  if (options.uaa) {
    passport.use(JWT, new xssec.JWTStrategy(options.uaa));
    passportStrategies.push(JWT);
  }

  if (options.anonymous) {
    passport.use(new AnonymousStrategy());
    passportStrategies.push('anonymous');
  }

  // configure express
  var app = createApp();
  options.auditLog && app.set('auditLog', new AuditLogger(options.auditLog));
  app.use(logging.middleware({ appContext: require('./logging').appContext }));
  app.use(createDsrMiddleware());
  app.set('query parser', 'simple');
  app.set('runtime', rt);

  app.use(function (req, res, next) {
    if (req.method === 'TRACE') {
      return res.status(403).send('HTTP TRACE Method is not allowed');
    }
    next();
  });

  if (rt.get('compression')) {
    app.use(compress());
  }
  app.use(cookieParser());
  app.use(middleware.locale);

  app.use(passport.initialize());
  app.use(function (req, res, next) {
    passport.authenticate(passportStrategies, handleAuthenticate(req, res, next))(req, res, next);
  });
  app.use(middleware.urlRewrite(rt));

  // redirect
  rt.redirectRules.forEach(function (rule) {
    app.get(rule.pathname, function (req, res) {
      res.redirect(rule.status || 302, rule.location);
    });
  });

  addXsjsHandlers(app, options, rt);

  addOdataHandlers(app, options, rt);

  addJobHandlers(app, options, rt);

  // static content
  rt.staticDirectories.forEach(function (staticDirectory) {
    app.use(staticDirectory.pathname, express.static(staticDirectory.dirname));
  });

  // catch 404 and forward to error handler
  app.use(middleware.notFound);

  // error handlers
  app.use(routes.error);

  return app;
};

function handleAuthenticate(req, res, next) {
  return function (err, user, info, statusCodes) {
    if (err) { return next(err); }

    if (user) {
      return req.logIn(user, { session: false }, function (err) {
        if (err) { return next(err); }
        req.authInfo = info;
        next();
      });
    }

    var jwtStrategyStatusCode = statusCodes[0];

    auditLogAuthFailed(req, function (err) {
      if (err) { return next(err); }
      sendAuthFailed(res, jwtStrategyStatusCode);
    });
  };
}

function addXsjsHandlers(app, options, rt) {
  var xsjsPaths = _.map(Object.keys(rt.xsjs), function addWildCard(path) {
    // wildcard needs to be mapped to support $.request.queryPath
    return path + '*';
  });
  if (xsjsPaths.length > 0) {
    app.all(xsjsPaths, middleware.anyBody(rt, options), middleware.xsjs(rt), routes.xsjs(rt));
  }
}

function addOdataHandlers(app, options, rt) {
  var odataServices = odata.createServices(rt);
  odataServices.forEach(function (odataService) {
    if (!isValidHanaSettings(options)) {
      app.use(odataService.getRootUriPath(), function (req, res, next) {
        next(new Error('Invalid HANA settings provided. OData services are disabled.'));
      });
    } else {
      var odataApp = createApp();
      odataApp.all('*', middleware.anyBody(rt, options), routes.xsodata(rt, odataService));
      app.use(odataService.getRootUriPath(), odataApp);
    }
  });

  app.clearODataCache = function (tenant) {
    odataServices.forEach(function (svc) {
      svc.clearCache(tenant);
    });
  };
}

function addJobHandlers(app, options, rt) {
  var jobsRt = new jobs.JobsRuntime(rt);
  var validJobs = jobsRt.getValidJobs();
  if (validJobs.length) {
    if (isValidHanaSettings(options)) {
      jobsRt.registerAllJobs();

      validJobs.forEach(function (job) {
        app.post(job.urlPath, bodyParser.json(), routes.startJob(jobsRt, options));
      });
    } else {
      logger.error('Jobs execution requires valid HANA configuration.');
    }
  }
}

function checkOptions(options) {
  if (!isValidHanaSettings(options)) {
    logger.warn('No HANA credentials provided. DB access and OData services will be disabled.');
  }
  validateOptionalBoolean(options, 'xsApplicationUser');
  validateOptionalBoolean(options, 'anonymous');
  if (!options.anonymous && !options.uaa) {
    throw new Error('No UAA configuration is provided in non-anonymous mode.');
  }
  if (!options.auditLog) {
    logger.warn('No Audit log configuration provided. Audit logging will be disabled.');
  }
  if (options.auditLog && options.auditLog.logToConsole) {
    logger.warn('Audit log messages will be written to console.');
  }
  if (!options.uaa) {
    logger.warn('No UAA configuration provided. JWT token authentication disabled.');
  }
  if (!options.mail) {
    logger.warn('No Mail options provided. $.net.Mail and $.net.SMTPConnection will be disabled.');
  }
  if (!options.jobs) {
    logger.warn('No Jobs options provided. $.jobs will be disabled.');
  }
  if (!options.secureStore) {
    logger.warn('Secure store not configured. $.security.Store will be disabled.');
  }
}

function isValidHanaSettings(options) {
  return options.hana &&
  ((options.hana.user && options.hana.password) ||
  (options.hana.clientid && options.hana.clientsecret));
}

function validateOptionalBoolean(options, prop) {
  var value = options[prop];
  if (value !== undefined && typeof value !== 'boolean') {
    throw new Error(prop + ' option should be a boolean');
  }
}

function auditLogAuthFailed(req, cb) {
  var auditLog = req.app.get('auditLog');
  if (!auditLog) {
    return cb(null);
  }
  auditLog.logSecurityEvent(req, 'Failed login attempt', 'UNKNOWN', cb);
}

function sendAuthFailed(res, statusCode) {
  statusCode === 401 && res.setHeader('WWW-Authenticate', 'Bearer realm="XSJS Compatibility Layer"');
  return res.status(statusCode).end(http.STATUS_CODES[statusCode]);
}

function createApp() {
  var app = express();
  app.disable('x-powered-by');
  return app;
}