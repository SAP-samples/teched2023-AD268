/* See documentation at end of file */

{
    var utils = require('./../utils/utils');
}

start                    = OWS d:definition OWS EOF
                            { return d; }
definition               =  s:service a:( OWS annotations)? se:( OWS settings)?
                            {
                                var ret = {}

                                ret.service = s;
                                ret.annotations = a ? a[1] : null;
                                ret.settings    = se ? se[1] : null;
                                return ret;
                           }
service                  = "service" n:(MWS namespace )? OWS b:servicebody
                           {
                            var ret =  { };
                            if (n) {
                                ret.namespace = n[1];
                            };
                            if (b.entityTypes) {
                                ret.entityTypes = b.entityTypes
                                Object.keys(b.entityTypes).forEach(function (key) {
                                    if (b.entityTypes[key].scopes && !b.scopes) {
                                        throw new Error("Missing scopes at service level");
                                    }
                                    if (b.entityTypes[key].scopes && b.entityTypes[key].scopes.debug) {
                                        throw new Error("Debug scope can not be defined at entitySet level");
                                    }
                                });
                            }
                            if (b.associations) {
                                ret.associations = b.associations
                            }

                            if (b.additionalExits) {
                                ret.additionalExits = b.additionalExits
                            }

                            if (b.scopes) {
                                ret.scopes = b.scopes
                            }

                            // FIX4MASTER Check if service scopes are defined if one entityset
                            // scope is defined
                            return ret;
                           }
namespace                = "namespace" MWS q:quotedstring
                           { return q; }

servicebody              = "{" e:entrylist m:(MWS metadata OWS ";")? OWS "}"
                           {
                              return e;
                             if (m) {
                                e.metadata = m[1];
                             }
                           }


entrylist                = e:( OWS entry OWS ";" )*
                           {
                              var ret = {};
                              ret.associations = {};
                              ret.entityTypes = {};
                              ret.additionalExits = {};
                              for (var i = 0; i < e.length; i++) {
                                  if (e[i][0+1].isAssociation === true) {
                                      delete e[i][0+1].isAssociation;
                                      ret.associations[e[i][0+1].name] = e[i][0+1];
                                  } else if (e[i][0+1].isMetadataExit === true) {
                                      delete e[i][0+1].isMetadataExit;
                                      ret.additionalExits.metadata = e[i][0+1];
                                  } else if (e[i][1] && e[i][1].type && e[i][1].type === "scope")  {
                                      ret.scopes = e[i][1].value;
                                  } else {
                                      ret.entityTypes[e[i][0+1].name] = (e[i][0+1]);
                                  }
                              }
                              return ret;
                           }
metadata_exit            = "metadata using" OWS q:quotedstring OWS
                           {
                               return {
                                   'isMetadataExit' :  true,
                                   'using' : q
                               };
                           }
entry                    = e:(  association / entity / metadata_exit / serviceScopes)
                           {   return e;  }

entity                   = o:object es:(MWS entityset )? w:(MWS with)? k:(MWS keys)? ct:(MWS concurrencytoken)?
                             rt:(MWS retain_order)? n:(MWS navigates)? ge:(MWS globalExpand)? a:(MWS aggregates )?
                             p:(MWS parameters)? m:(modifications)? scopes:(MWS scopes)? ad:(MWS settings_admindata)?
                           {
                                var ret =  {};
                                var atv = '.attributeview';
                                if (utils.endsWith(o.name,atv)){
                                    ret.table = o.name.substring(0,o.name.length-atv.length);
                                    ret.isAttributeView = true;
                                } else {
                                    ret.table = o.name;
                                    ret.isAttributeView = false;
                                }
                                if (o.isExplicitEntity) {
                                    ret.isExplicitEntity = o.isExplicitEntity;
                                }

                                ret.schema = o.schema;

                                if (es) {
                                    ret.name = es[1];
                                } else {
                                    var i = ret.table.indexOf('::');
                                    if (i > -1) {
                                        ret.name = ret.table.substr(i+2);
                                    } else {
                                        ret.name = ret.table;
                                    }
                                }



                                if (k) {
                                    if (k[1].isGenerated === true) {
                                        delete (k[1].isGenerated);
                                        ret['keys_generated'] = k[1];
                                    } else {
                                        ret.keys = k[1];
                                    }
                                } else {
                                    ret.keys = null;
                                }

                                //properties
                                ret.properties = {};
                                if (w) {
                                    if (w[1].isWithOut === true) {
                                        ret.properties.without = w[1].propertylist;
                                    } else {
                                        ret.properties.with= w[1].propertylist;
                                    }
                                }

                                if (ge) {
                                ret.globalExpand = true;
                                }

                                ret.aggregates = a ? a[1] : null;
                                ret.parameters = p ? p[1] : null;
                                ret.concurrencytoken = ct ? ct[1] : null;
                                ret.retainOrder = rt ? rt[1] : null;
                                ret.modifications = m || null;
                                ret.admindata = ad ? ad[1].value : null;

                                if (n) {
                                    ret.navigates = n[1];
                                } else {
                                    ret.navigates = null;
                                }

                                if (scopes) {
                                    ret.scopes = scopes[1].value;
                                }

                                return ret;
                           }



globalExpand             = "expand via global temporary table";
concurrencytoken         =  "concurrencytoken" k:(MWS keylist)?
                            {
                                var ret = {};

                                if (k) {
                                    k[1].map(function(elem){
                                        ret[elem] = true;
                                    });
                                }
                                return ret;
                            }
retain_order             = "retain" MWS "order"
                            {
                                return true;
                            }

object                   =  e:("entity" MWS)?  s:(quotedstring ".")? r:( repoobject_catalogobject_name )
                            {
                                return {
                                    'isExplicitEntity' : (e ? true : false),
                                    'name' : r,
                                    'schema' : (s ? s[0] : null)
                                }
                            }
repoobject_catalogobject_name = q:quotedstring
                           { return q; }
repoobject               = quote repopackage "/" reponame_repoextension quote
reponame_repoextension   = noquotenoslash*
repopackage              = noquotenoslash*
reponame                 = noquotenoslash*
repoextension            = noquotenoslash*
catalogobject            = catalogobjectschema "." catalogobjectname
catalogobjectschema      = quotedstring
catalogobjectname        = quotedstring
entityset                = "as" MWS e:entitysetname
                           { return e;}
entitysetname            = quotedstring
with                     = w:("without"/"with")  OWS p:propertylist
                            {
                                var ret = { propertylist : p };
                                if (w === 'without') {
                                    ret.isWithOut = true;
                                }
                                return ret;
                            }
propertylist             = "(" OWS c:columnlist OWS ")"
                           {
                           return c;
                           }
columnlist               = c:columnname cl:(OWS "," OWS columnname)*
                           {
                                var ret = [c];
                                for (var i = 0; i < cl.length; i++) {
                                  ret.push(cl[i][2+1]);
                                }
                                return ret;
                           }
columnname               = q:quotedstring
                           { return q;}
keys                     = ("keys" / "key")  k:(OWS keylist / MWS keygenerated )
                           {
                                return k[1];
                           }
keylist                  = propertylist
keygenerated             = "generate" k:(MWS keygenlocal)?
                           {
                                var ret= {
                                    isGenerated : true,
                                }
                                if ( k) {
                                   ret.local = k[1];
                                }
                                return ret;
                           }
keygenlocal              = "local" MWS c:columnname
                            {
                                return c;
                            }
navigates                = "navigates" OWS "(" OWS n:navlist ")"
                           { return n; }
navlist                  = n:naventry OWS nl:("," OWS naventry OWS)*
                           {
                                var ret = {};
                                ret[n.name] = n;
                                for (var i = 0; i < nl.length; i++) {
                                  ret[nl[i][2].name]= nl[i][2];
                                }
                                return ret;
                           }
naventry                 = a:assocname MWS "as" MWS n:navpropname f:(MWS fromend)?
                           {
                                var ret =  {
                                    "name" : n,
                                    "association" : a,
                                }

                                if (f) {
                                    ret.from = {};
                                    if (f[1] === 'principal') {
                                        ret.from.principal = true;
                                    } else {
                                        ret.from.dependent = true;
                                    }
                                }
                                return ret;
                           }

serviceScopes             = ss:scopes
                          {
                              if (!ss.value.create) {
                                throw new Error("Missing create scope in service");
                              }

                              if (!ss.value.read) {
                                throw new Error("Missing read scope in service");
                              }

                              if (!ss.value.update) {
                               throw new Error("Missing update scope in service");
                              }

                              if (!ss.value.delete) {
                                throw new Error("Missing delete scope in service");
                              }

                              return ss;
                          }



scopes                  = OWS "scopes" OWS "(" OWS sd:scopeDef+ OWS ")" OWS
                          {
                              var ret = {
                                  scopesMap: {}
                              },
                              scope,
                              type;

                              sd.forEach(function (elem) {

                                  scope = elem.def;
                                  type = elem.type;

                                  ret[elem.type] = [scope.scope];

                                      if (!ret.scopesMap[scope.scope]) {
                                          ret.scopesMap[scope.scope] = {
                                              methods: {}
                                          }
                                      }
                                      ret.scopesMap[scope.scope].methods[type] = true;

                              }) // forEach() end

                              return {
                                  type: "scope",
                                  value: ret
                              };
                          }

scopeDef	            = OWS m:method OWS "(" OWS md:methodDef OWS ")" (",")?
                            {
                                var ret = {
                                    type: m,
                                    def: md
                                 };

                                 return ret;
                            }

method 		            = methodCreate / methodRead / methodUpdate / methodDelete / methodDebug

methodDef               = elem:methodDefElement OWS
                            {
                                return elem
                            }

methodDefElement		    = s1:quotedstring
                            {
                              var ret = {
                                scope: s1
                              };

                              return ret;
                            }

methodCreate	=  "create" { return "create"; }
methodRead 		=  "read" { return "read"; }
methodUpdate	=  "update" { return "update"; }
methodDelete	=  "delete" { return "delete"; }
methodDebug	    =  "debug" { return "debug"; }







assocname                = q:quotedstring
                           { return q;}
navpropname              = q:quotedstring
                           { return q;}
fromend                  = "from" MWS pd:( "principal" / "dependent" ) {
                                return pd;
                            }
aggregates               = "aggregates" MWS "always" a:(OWS  aggregatestuple)?
                           {
                              if (a) {
                                  return a[1];
                              }
                              return {};
                           }
aggregatestuple          = "(" OWS a:aggregateslist OWS ")" {
                                return a;
                            }
aggregateslist           = a:aggregate OWS al:("," OWS aggregate)*
                            {
                                var ret = [a];
                                for (var i = 0; i < al.length; i++) {
                                    ret.push(al[i][2]);
                                }
                                return ret;
                           }

aggregate                = a:aggregatefunction MWS "of" MWS c:columnname
                           {
                               return { "function" : a, "column" : c };
                           }

aggregatefunction        = ( "SUM" / "AVG" / "MIN" / "MAX" / "COUNT" )
parameters               = "parameters" MWS "via"  pk:(MWS parameterskeyand)? MWS "entity" pe:(MWS parameterentitysetname)? pp:(MWS parametersresultsprop)?
                            {
                                var ret = {};
                                if ( pk ) {
                                    ret.viaKey = true;
                                }
                                if ( pe ) {
                                    ret.entity = pe[1];
                                }
                                if ( pp ) {
                                    ret.resultProperty = pp[1];
                                }
                                return ret;
                            }
parameterskeyand         = "key" MWS "and"
parameterentitysetname   = q:quotedstring
                           { return q;}
parametersresultsprop    = "results" MWS "property" MWS q:quotedstring
                            {
                                return q;
                            }

modifications              = aMs:(modificationSpecs)*
                            {
                                var ret = { };
                                for (var i = 0; i < aMs.length; i++) {
                                    if (aMs[i].create) {
                                        ret.create = aMs[i].create;
                                    }
                                    if (aMs[i].update) {
                                        ret.update = aMs[i].update;
                                    }
                                    if (aMs[i].delete) {
                                        ret.delete = aMs[i].delete;
                                    }
                                }
                                return ret;
                            }

modificationSpecs         = OWS cud:( create / update / delete )
                           {
                                return cud;
                           }

create                   = "create" MWS m:modificationspec
                           { return { "create" : m }; }
update                   = "update" MWS m:modificationspec
                           { return { "update" : m }; }
delete                   = "delete" MWS m:modificationspec
                           { return { "delete" : m }; }
metadata                   = "metadata" MWS m:modificationspec
                          { return { "metadata" : m }; }

modificationspec         = a:(modificationactionevents / events / "forbidden")
                           {
                                return a;
                           }
modificationactionevents = a:modificationaction em:(MWS events)?
                           {
                               var ret = {};
                               ret.using = a;
                               if (em) {
                                    ret.events = em[1].events;
                               }

                               return ret;
                           }

modificationaction       = "using" MWS a:action
                           { return a; }
action                   = q:quotedstring
                           { return q; }
events                   = "events" OWS "(" OWS e:eventlist OWS ")"
                           { return { events: e}; }
eventlist                = e:eventtypeaction OWS el:("," OWS eventtypeaction)*
                           {
                                var ret = [e];
                                for (var i = 0; i < el.length; i++) {
                                  ret.push(el[i][2]);
                                }
                                return ret;
                           }
eventtypeaction          = e:eventtype MWS a:action
                           {
                            return { type: e, action:a };
                           }
eventtype                = ( "before" / "after" / "precommit" / "postcommit" )
association              = a:associationdef c:(MWS associationrefcontraint)? MWS p:principalend MWS d:dependentend as:(MWS (assoctable / storage) )? m:(modifications)?
                           {
                               var ret = {
                                    "isAssociation" : true,
                                    "name" : a.name,
                                    "principal" : p,
                                    "dependent" : d,
                                    "referentialConstraint" : ( c ? true : false ),
                                    "over" : null,
                               }
                               if ( a.viaParameters) {
                                  ret.viaParameters =  a.viaParameters;
                               }
                               if (as) {
                                    if (as[1].over) {
                                        ret.over = as[1].over;
                                    }
                                    if (as[1].storage) {
                                        ret.storage = as[1].storage;
                                    }
                               }

                               ret.modification = m || null;
                               return ret;
                           }
associationrefcontraint  = "with referential constraint"
associationdef           = "association" p:(MWS "via parameters" )? MWS a:assocname
                           {
                            var ret = { name : a };
                            if (p) {
                                ret.viaParameters = true;
                            }
                            return ret;
                           }

principalend             = "principal" MWS e:end
                           { return e; }
dependentend             = "dependent" MWS e:end
                           { return e; }
end                      = e:endref MWS m:multiplicity
                           {
                               var ret = {
                                   "type": e.type,
                                   "joinproperties" :e.joinproperties,
                                   "multiplicity" : m,

                               };
                               return ret;
                           }
endref                   = et:endtype jp:(OWS joinpropertieslist)?
                           { return { "type" : et, "joinproperties" : jp ? jp[1]: null };}
endtype                  = e: entitysetname
                           { return e; }
joinpropertieslist       = "(" OWS jp:joinproperties OWS ")"
                           { return jp; }
joinproperties           = c: columnlist
                           { return c; }
multiplicity             = "multiplicity" OWS quote m:multiplicityvalue quote
                           { return m; }
multiplicityvalue        = ( "0..1" / "1..*" / "1" /"*" )
assoctable               = "over" MWS r:repoobject_catalogobject_name MWS p:overprincipalend MWS d:overdependentend
                           {
                                var over = {
                                    "object" : r,
                                    "principal" : p,
                                    "dependent" : d
                                };
                                return { "over" : over };
                           }
overprincipalend         =  "principal" OWS oe:overend
                            { return oe; }
overdependentend         =  "dependent" OWS oe:overend
                            { return oe; }
overend                  =  p:propertylist
                            { return p; }

storage                  =  s:( s1:nostorage / s2:storageend )
                            {
                                return { storage :s };
                            }

nostorage                = "no" MWS "storage"
                            {
                                return "none"
                            }
storageend               =  "storage" MWS "on" MWS pd:( "principal" / "dependent" )
                            {
                                return pd;
                            }

annotations              = "annotations" OWS a:annotationsbody
                            { return a; }
annotationsbody          = "{"  a:annotationscontent? OWS "}"
                            { return a; }
annotationscontent       =  al:( OWS annotationconfig OWS ";")*
                            {
                                var ret = {};
                                var item;
                                for (var i = 0; i < al.length; i++) {
                                    item = al[i][1];
                                    ret[item.name] = item.value;
                                }
                                return ret;
                            }

annotationconfig         =  a:(annotation_enable)
                            { return a; }
annotation_enable        =  "enable" MWS s:string
                            { return { name : "enable", value : s }; }

settings                 = "settings" OWS s:settingsbody
                            { return s; }
settingsbody             = "{"  s:settingscontent? OWS "}"
                            { return s; }
settingscontent          =  sl:( OWS settingsconfig OWS ";")*
                            {
                                var ret = {};
                                var item;
                                for (var i = 0; i < sl.length; i++) {
                                    item = sl[i][1];
                                    ret[item.name] = item.value;
                                }
                                return ret;
                            }
settingsconfig           = s:(settings_meta_cache / settings_content / settings_enable / settings_support /
                            settings_hints / settings_admindata / settings_limits / settings_noDimensionAnnoOnTextProperty )
                            { return s; }
settings_meta_cache      = "metadata" MWS ( "cache.control" / "cache-control") MWS qs:quotedstring
                            { return {
                                    "name" : "metadata",
                                    "value" : {
                                        "cache-control" : qs
                                    }
                                };
                            }
settings_content         = "content"  MWS ( "cache.control" / "cache-control") MWS qs:quotedstring
                            { return {
                                    "name" : "content",
                                    "value" : {
                                        "cache-control" : qs
                                    }
                                };
                            }
settings_enable          = "enable" MWS string
                            { return { name : "enable", value : s }; }
settings_support         = "support" MWS s:string
                            { return { name : "support", value : s }; }

settings_noDimensionAnnoOnTextProperty = "noDimensionAnnoOnTextProperty" MWS s:string
                                {
                                    return {
                                        name : "noDimensionAnnoOnTextProperty",
                                        value : s
                                    };
                                }

settings_hints           = "hints" MWS hl:("null" / hintlist)
                            {
                                var value = hl === 'null' ? [] : hl

                                return {
                                    name : 'hints',
                                    value : value
                                };
                            }

settings_limits           = "limits" MWS qs:limits_nv OWS qsl:("," OWS a:limits_nv OWS)*
                            {
                                var value = { [qs.name] : qs.value };
                                for (var i = 0; i < qsl.length; i++) {
                                    value[qsl[i][2].name] = qsl[i][2].value;
                                }

                                return {
                                    name : 'limits',
                                    value : value
                                };
                            }

limits_nv                 = as:("max_records" / "max_expanded_records" / "max_body_size") OWS "=" OWS a:string_no_comma
                            {
                                return {
                                    name : as,
                                    value: a
                                };
                            }

settings_admindata        = "admindata" MWS qs:admindata_as OWS qsl:("," OWS a:admindata_as OWS)*
                            {
                                var value = [qs];
                                for (var i = 0; i < qsl.length; i++) {
                                    value.push(qsl[i][2]);
                                }

                                return {
                                    name : 'admindata',
                                    value : value
                                };
                            }

admindata_as           =    as:("add" / "skip") MWS a: admindata_set
                            {
                                if ( as === "add") {
                                    a.value = 'add';
                                } else {
                                    a.value = 'skip';
                                }

                                return a;
                            }


admindata_set             = w:( "created" / "modified") MWS o:( "by" / "at" )
                            {
                                return {
                                    operation : w === "created" ? "create" : "modify",
                                    property : o,
                                };
                            }

hintlist = qs: quotedstringWithEscaping OWS qsl:("," OWS quotedstringWithEscaping OWS)*
                            {
                                var items = [qs];
                                for (var i = 0; i < qsl.length; i++) {
                                   items.push(qsl[i][2]);
                                }
                               return items;
                            }

quotedstringWithEscaping = quote c:stringWithEscaping* quote
                            { return c.join(''); }

stringWithEscaping = !(quote / "\\") c:.  { return c; }
                / "\\" e:escapable { return e; }

escapable = "'" / '"' / "\\"

quotedstring   = quote n:notquote* quote
                 { return n.join(''); }
string         = a:apha_num*
                 { return a.join(''); }
string_no_comma= a:apha_num_no_comma*
                  { return a.join(''); }
apha_num       = !(sep / ";") char: . {return char}
apha_num_no_comma = !(sep / ";" / ",") char: . {return char}
OWS            = sep*;
MWS            = sep+;

notquote       = !(quote) a: anyCharacter
                 { return a; }
noquotenoslash = !(quote/"/") anyCharacter

sep            = whiteSpace / lineTerminator / enclosedComment / lineComment

whiteSpace      = [\t\v\f \u00A0\uFEFF]
lineTerminator  = [\n\r]
quote           = "\""
enclosedComment = "/*" (!"*/" anyCharacter)* "*/"
lineComment     = "//" (!lineTerminator anyCharacter)*
anyCharacter    = .
EOF             = !.



//######################################################################################################################
//######################################################################################################################
//######################################################################################################################
/*
    http://help.sap.com/hana/SAP_HANA_Developer_Guide_en.pdf
    Chapter 7.1.7 OData Service Definition Language Syntax

    definition :=service [annotations]
    service :='service' [namespace] body
    namespace :='namespace' quotedstring
    quotedstring :=quote string quote
    string :=UTF8
    quote :='"'
    body :='{' content '}'
    content :=entry [content]
    entry :=( entity | association ) ';'
    entity :=object [entityset] [with] [keys] [navigates] [aggregates] [parameters] [modification]
    object :=['entity'] ( repoobject | catalogobject )
    repoobject :=quote repopackage '/' reponame '.' repoextension quote
    repopackage :=string
    reponame :=string
    repoextension :=string
    catalogobject :=catalogobjectschema '.' catalogobjectname
    catalogobjectschema :=quotedstring
    catalogobjectname :=quotedstring
    entityset :='as' entitysetname
    entitysetname :=quotedstring
    with :=( 'with' | 'without' ) propertylist
    propertylist :='(' columnlist ')'
    columnlist :=columnname [',' columnlist]
    columnname :=quotedstring
    keys :='key' ( keylist | keygenerated )
    keylist :=propertylist
    keygenerated :='generate' ( keygenlocal )
    keygenlocal :='local' columnname
    navigates :='navigates' '(' navlist ')'
    navlist :=naventry [',' navlist]
    naventry :=assocname 'as' navpropname [fromend]
    assocname :=quotedstring
    navpropname :=quotedstring
    fromend :='from' ( 'principal' | 'dependent' )
    aggregates :='aggregates' 'always' [aggregatestuple]
    aggregatestuple :='(' aggregateslist ')'
    aggregateslist :=aggregate [',' aggregateslist]
    aggregate :=aggregatefunction 'of' columnname
    aggregatefunction :=( 'SUM' | 'AVG' | 'MIN' | 'MAX' )
    parameters :='parameters' 'via' [parameterskeyand] 'entity'
    [parameterentitysetname] [parametersresultsprop]
    parameterskeyand :='key' 'and'
    parameterentitysetname :=quotedstring
    parametersresultsprop :='results' 'property' quotedstring
    modification :=[create] [update] [delete]
    create :='create' modificationspec
    update :='update' modificationspec
    delete :='delete' modificationspec
    modificationspec :=( modificationaction [events] | events | 'forbidden' )
    modificationaction :='using' action
    action :=quotedstring
    events :='events' '(' eventlist ')'
    eventlist :=eventtype action [',' eventlist]
    eventtype :=( 'before' | 'after' | 'precommit' | 'postcommit' )
    association :=associationdef principalend dependentend [( assoctable | storage )]
    associationdef :='association' assocname
    principalend :='principal' end
    dependentend :='dependent' end
    end :=endref multiplicity
    endref :=endtype [joinpropertieslist]
    endtype :=entitysetname
    joinpropertieslist :='(' joinproperties ')'
    joinproperties :=columnlist
    multiplicity :='multiplicity' quote multiplicityvalue quote
    multiplicityvalue :=( '1' | '0..1' | '1..*' | '*' )
    assoctable :='over' repoobject overprincipalend overdependentend  [modification]
    overprincipalend :='principal' overend
    overdependentend :='dependent' overend
    overend :=propertylist
    storage :=( nostorage | storageend [modification] )
    nostorage :='no' 'storage'
    storageend :='storage' 'on' ( 'principal' | 'dependent' )
    annotations :='annotations' annotationsbody
    annotationsbody :='{' annotationscontent '}'
    annotationscontent :=annotationconfig [annotationscontent]
    annotationconfig :='enable' annotation
    annotation :='OData4SAP'
*/
