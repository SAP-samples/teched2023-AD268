// Copyright 2016 SAP SE.
//
'use strict';

var TYPE = {
  IN: 0,
  INOUT: 1,
  OUT: 2
};

var PROC_META = [
  { type: TYPE.IN,    name: 'DOCUMENT_BINARY',           default: null },
  { type: TYPE.IN,    name: 'DOCUMENT_TEXT' },
  { type: TYPE.INOUT, name: 'LANGUAGE_CODE',             default: '' },
  { type: TYPE.INOUT, name: 'MIME_TYPE',                 default: '' },
  { type: TYPE.IN,    name: 'TOKEN_SEPARATORS',          default: '' },
  { type: TYPE.IN,    name: 'LANGUAGE_DETECTION',        default: '' },
  { type: TYPE.IN,    name: 'CONFIGURATION_SCHEMA_NAME', default: '' },
  { type: TYPE.IN,    name: 'CONFIGURATION',             default: '' },
  { type: TYPE.IN,    name: 'RETURN_PLAINTEXT' },
  { type: TYPE.OUT,   name: 'TA_ANNOTATIONS' },
  { type: TYPE.OUT,   name: 'PLAINTEXT' }
];

var CALL_STATEMENT = 'CALL TA_ANALYZE (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

exports.analyze = function(values, client, cb) {
  var params = normalizeParams(values);

  if (isHdbInstance(client)) {
    return callWithHdb(params, client, cb)
  }
  callWithHanaClient(params, client, cb);
}

function normalizeParams(values) {
  if (Array.isArray(values)) {
    return values;
  }

  var input = {};
  PROC_META.map(function (meta) {
    if (meta.type === TYPE.OUT) {
      return;
    }
    if (values.hasOwnProperty(meta.name)) {
      input[meta.name] = values[meta.name];
    } else {
      if (meta.hasOwnProperty('default')) {
        input[meta.name] = meta.default;
      }
    }
  });
  return input;
}

function isHdbInstance(client) {
  return 'readyState' in client;
}

function callWithHdb(params, client, cb) {
  client.prepare(CALL_STATEMENT, function(err, st) {
    if(err) {
      return cb(processPrepareStatementError(err));
    }
    st.exec(params, function(err, parameters, rows) {
      st.drop();
      cb(err, parameters, rows);
    });
  });
}

function callWithHanaClient(params, client, cb) {
  var dbStream = require('@sap/hana-client/extension/Stream');
  dbStream.createProcStatement(client, CALL_STATEMENT, function (err, stmt) {
    if (err) {
      return cb(processPrepareStatementError(err));
    }

    stmt.exec(params, function (errExec, outParams, rows) {
      stmt.drop(function (errDrop) {
        var e = errExec || errDrop;
        if (e) {
          return cb(e);
        }
        cb(null, outParams, rows);
      });
    });
  });
}

function processPrepareStatementError(err) {
  if(err.code == 328 && err.message.indexOf('invalid name of function or procedure: TA_ANALYZE') > -1) {
    return new Error('This HANA version does not support analyze()');
  }
  return err;
}
