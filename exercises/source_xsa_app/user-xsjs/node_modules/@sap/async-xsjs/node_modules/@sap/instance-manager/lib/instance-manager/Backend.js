'use strict';

var format = require('util').format;

var userInput = require('./user-input');
var RestAdapter = require('./RestAdapter');
var PollingSession = require('../PollingSession');
var pollingControl = require('../polling-control');
var INSTANCE = require('./constants').STATUS.INSTANCE;

module.exports = Backend;

function Backend(options) {
  userInput.validateMainOptions(options);
  this._options = options;
  this._adapter = new RestAdapter(options);
}

Backend.prototype.init = function (callback) {
  callback();
};

Backend.prototype.create = function (tenant, optionalParameters, callback) {
  var self = this;
  this._adapter.initCreateInstance(tenant, optionalParameters, function (err) {
    if (err) {
      return callback(ErrorInfo(err));
    }

    self._pollUntilCreated(tenant, callback);
  });
};

Backend.prototype.get = function (tenant, callback) {
  var self = this;
  this._adapter.getInstance(tenant, function (err, instance) {
    if (err) {
      return callback(err);
    }

    if (!instance) {
      return callback(null, null);
    }

    if (instance.status === INSTANCE.CREATING) {
      return self._pollUntilCreated(tenant, callback);
    }

    callback(null, instance);
  });
};

Backend.prototype.getAll = function (callback) {
  this._adapter.getAllInstances(callback);
};

Backend.prototype.delete = function (tenant, callback) {
  var self = this;
  this._adapter.initDeleteInstance(tenant, function (err) {
    if (err) {
      return callback(ErrorInfo(err));
    }

    self._pollUntilDeleted(tenant, callback);
  });
};

Backend.prototype._pollUntilCreated = function (tenant, callback) {
  var polling = new PollingSession(tenant,
    this._options.polling_interval_millis,
    this._options.polling_timeout_seconds);

  polling.poll(this._adapter.getInstance.bind(this._adapter, tenant),
    function (instance) {
      if (!instance) {
        return pollingControl.error(format("No instance for tenant '%s' found while polling until instance is created", tenant));
      }
      if (instance.status === INSTANCE.CREATING) {
        return pollingControl.continue();
      }
      if (instance.status === INSTANCE.CREATED) {
        return pollingControl.ok(instance);
      }
      return pollingControl.error(badInstanceStatusMessage(instance));
    }, callback);
};

Backend.prototype._pollUntilDeleted = function (tenant, callback) {
  var polling = new PollingSession(tenant,
    this._options.polling_interval_millis,
    this._options.polling_timeout_seconds);

  polling.poll(this._adapter.getInstance.bind(this._adapter, tenant),
    function (instance) {
      if (!instance) {
        return pollingControl.ok();
      }
      if (instance.status === INSTANCE.DELETING) {
        return pollingControl.continue();
      }
      return pollingControl.error(badInstanceStatusMessage(instance));
    }, callback);
};

function badInstanceStatusMessage(instance) {
  var message = format("Status of instance for tenant '%s' is %s", instance.tenant_id, instance.status);
  if (instance.failed_message) {
    message += format('. Reason: %s.', instance.failed_message);
  }
  return message;
}

function ErrorInfo(err){
  if (err.responseError !== undefined){
    return err;
  }

  if (typeof err !== 'object'){
    var errorInfo = new Error(err.name);
    errorInfo.responseError = err.name;
    errorInfo.responseStatusCode = err.statusCode;
    errorInfo.responseDescription = err.message;
    return errorInfo;
  }

  err.responseError = err.name;
  err.responseStatusCode = err.statusCode;
  err.responseDescription = err.message;
  return err;
}
