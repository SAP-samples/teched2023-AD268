const RedirectedRequest = require('./RedirectedRequest');
const Retry = require('./Retry');

class RetryRequest extends RedirectedRequest {

    constructor(options) {
        super(options);
        this._retry = options.retry;
    }

    /**
     * Executes the request
     *
     * @returns {object} response - The http response
     * @throws Throws an error if the request fails. the error may has an .response property.
     */
    async execute() {
        if (this._retry) {
            return new Retry(this._retry.count || 1, this._retry.timeoutStrategy)
                .try(async (currentTryCount, maxTryCount) => {
                    const response = await super.execute();
                    if (this._retry.validate) {
                        const isValid = await this._retry.validate(response, currentTryCount, maxTryCount);
                        if (isValid === false && currentTryCount < maxTryCount) throw new Error('Response has been invalidated by validate method');
                    }
                    return response;
                });
        }
        return await super.execute();
    }
}

module.exports = RetryRequest;

