{"dependencies":{},"description":"The Node.js module to provide a native API for text analysis on the XSA platform in HANA.","devDependencies":{"@sap/hana-client":"2.4.18","async":"=1.4.2","filter-node-package":"2.0.2","hdb":"0.13.0","mocha":"=2.2.5"},"engines":{"node":"^6.0.0"},"keywords":["ta-analyze"],"main":"src/ta.js","maintainers":[{"name":"https-support.sap.com","email":"do-not-reply@sap.com"}],"name":"@sap/textanalysis","optionalDependencies":{},"readme":"# @sap/textanalysis\n\n@sap/textanalysis is a Node.js module on the XS Advanced platform that supports text analysis. Text analysis performs linguistic analysis and entity extraction on unstructured text documents.\n\n@sap/textanalysis is implemented as an interface to the `TA_ANALYZE` SQL stored procedure. It provides the following single API function:\n- `analyze()`\n\nFor more information on text analysis and the `TA_ANALYZE` stored procedure, see the [Text Analysis Developer Guide](http://help.sap.com/hana/SAP_HANA_Text_Analysis_Developer_Guide_en.pdf).\nNote that `TA_ANALYZE` and @sap/textanalysis is only available on HANA 2.0 and later versions.\n\n## Usage example\nFirst, a HANA database connection must be established (either with [hdb](https://github.com/SAP/node-hdb) or with @sap/hana-client). Then the client database object can be passed to the analyze method along with the input parameters. The input parameters set the input variables to the `TA_ANALYZE` stored procedure.\n\n```javascript\nvar ta = require('@sap/textanalysis');\nvar client;\nvar options = {\n    host: process.env.HANA_HOST,\n    port: process.env.HANA_PORT,\n    user: process.env.HANA_USER || 'system',\n    password: process.env.HANA_PASSWORD || 'manager',\n};\nasync.series([\n\tfunction connect(callback) {\n\t\tclient = hdb.createClient(options);\n\t\tclient.connect(callback);\n\t},\n\tfunction analyze(callback) {\n\t\tvar values = {\n\t\t\tDOCUMENT_TEXT: '<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>',\n\t\t\tLANGUAGE_CODE: 'EN',\n\t\t\tCONFIGURATION: 'EXTRACTION_CORE',\n\t\t\tRETURN_PLAINTEXT: 0\n\t\t};\n\t\tta.analyze(values, client, function done(err, parameters, rows) {\n\t\t\tif (err) { return console.error('error', err); }\n\t\t\tcallback();\n\t\t});\n\t},\n\tfunction end(callback) {\n\t\tclient.end(callback);\n\t}], done\n);\n```\n","readmeFilename":"README.md","repository":{"type":"git"},"scripts":{"prepareRelease":"clean-packages && npm prune --production","test":"npm run unit-tests","unit-tests":"node ./node_modules/mocha/bin/_mocha test/dummy.js"},"version":"1.1.0","license":"SEE LICENSE IN developer-license-3.1.txt"}