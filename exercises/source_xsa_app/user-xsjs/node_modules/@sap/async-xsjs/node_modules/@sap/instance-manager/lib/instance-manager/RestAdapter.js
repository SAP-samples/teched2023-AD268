'use strict';

var format = require('util').format;
var fetch = require('node-fetch');

var safeParse = require('../utils').safeJsonParse;
var HTTP = require('./constants').STATUS.HTTP;
var ENDPOINT = require('./constants').ENDPOINT;
var debug = require('debug')('instance-manager');
var DEBUG_SEPARATOR = ' - ';

module.exports = RestAdapter;

function RestAdapter(options) {
  this._options = options;
}

RestAdapter.prototype.getAllInstances = function (callback) {
  this._sendRequest(ENDPOINT.GET_ALL, null, null, function (err, reqContext, res, body) {
    if (err) {
      return callback(err);
    }

    if (res.statusCode !== HTTP.OK) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    var parseResult = safeParse(body);
    if (parseResult.err) {
      return reportParsingError(reqContext, parseResult.err, body, callback);
    }

    reqContext.push('All instances count: ' + parseResult.data.length);
    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null, parseResult.data);
  });
};

RestAdapter.prototype.initCreateInstance = function (tenant, body, callback) {
  this._sendRequest(ENDPOINT.CREATE, tenant, body, function (err, reqContext, res, body) {
    if (err) {
      return callback(err);
    }

    if (res.statusCode !== HTTP.CREATE_STARTED) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null);
  });
};

RestAdapter.prototype.getInstance = function (tenant, callback) {
  this._sendRequest(ENDPOINT.GET, tenant, null, function (err, reqContext, res, body) {
    if (err) {
      return callback(err);
    }

    if (res.statusCode === HTTP.NOT_FOUND) {
      debug(reqContext.join(DEBUG_SEPARATOR));
      return callback(null, null);
    }

    if (res.statusCode !== HTTP.OK) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    var parseResult = safeParse(body);
    if (parseResult.err) {
      return reportParsingError(reqContext, parseResult.err, body, callback);
    }

    reqContext.push('Instance status ' + parseResult.data.status);
    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null, parseResult.data);
  });
};

RestAdapter.prototype.initDeleteInstance = function (tenant, callback) {
  this._sendRequest(ENDPOINT.DELETE, tenant, null, function (err, reqContext, res, body) {
    if (err) {
      return callback(err);
    }

    if (res.statusCode !== HTTP.DELETE_STARTED) {
      return reportUnexpectedStatusError(reqContext, res, body, callback);
    }

    debug(reqContext.join(DEBUG_SEPARATOR));
    callback(null);
  });
};

RestAdapter.prototype._sendRequest = function (endpoint, tenant, body, callback) {
  var reqOptions = this._buildOptions(endpoint, tenant, body);
  var reqContext = [reqOptions.method, resourceName(tenant)];
  var res = {
    headers: {}
  };
  fetch(reqOptions.url, reqOptions).then(function (response) {
    res.statusCode = response.status;
    for (var header of response.headers) {
      res.headers[header[0].toLowerCase()] = header[1];
    }
    return response.text();
  }).then(function (body) {
    reqContext.push('Response status ' + res.statusCode);
    callback(null, reqContext, res, body);
  }).catch(function (err) {
    reportNetworkError(err, reqContext, callback);
  });
};

RestAdapter.prototype._buildOptions = function (endpoint, tenant, body) {
  var url = this._options[endpoint.name];
  var options = {
    method: endpoint.method,
    url: (tenant) ? url.replace('{tenant_id}', tenant) : url,
    headers: {
      'Authorization': 'Basic ' + Buffer.from(this._options.user + ':' + this._options.password).toString('base64')
    }
  };
  if (body) {
    options.headers['Content-type'] = 'application/json';
    options.body = JSON.stringify(body);
  }
  return options;
};

function resourceName(tenant) {
  return (tenant) ? format("instance for tenant '%s'", tenant) : 'instances for all tenants';
}

function reportNetworkError(err, reqContext, callback) {
  reqContext.push('Error: ' + err.message);
  var message = reqContext.join(DEBUG_SEPARATOR);

  debug(message);
  callback(new Error(message));
}

function reportUnexpectedStatusError(reqContext, res, body, callback) {
  var reason = unexpectedStatusReason(res, body);
  reason && reqContext.push(reason);
  var message = reqContext.join(DEBUG_SEPARATOR);

  debug(message);
  var err = new Error(message);
  err.statusCode = res.statusCode;
  callback(err);
}

function unexpectedStatusReason(res, body) {
  if (!body) {
    return;
  }

  var contentType = res.headers['content-type'];
  if (contentType && contentType.indexOf('application/json') === 0) {
    var parseResult = safeParse(body);
    if (parseResult.data && parseResult.data.description) {
      return parseResult.data.description;
    }
  }

  return body;
}

function reportParsingError(reqContext, parsingErr, body, callback) {
  reqContext.push('Error parsing JSON ' + parsingErr.message);
  var message = reqContext.join(DEBUG_SEPARATOR);

  debug(message, 'Body:', body);
  callback(new Error(message));
}
