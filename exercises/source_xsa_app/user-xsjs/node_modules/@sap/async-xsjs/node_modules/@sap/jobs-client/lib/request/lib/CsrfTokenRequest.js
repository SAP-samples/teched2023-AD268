const CookieRequest = require('./CookieRequest');

class CsrfTokenRequest extends CookieRequest {

    constructor(options) {
        super(options);
        this._csrfToken = null;
        this._csrf = options.csrf;
    }

    setCsrfToken(response, options) {
        if (response && response.headers && response.headers['x-csrf-token'] && response.headers['x-csrf-token'] !== 'Fetch') {
            if (!options.headers) options.headers = {};
            options.headers['x-csrf-token'] = response.headers['x-csrf-token'];
            this._csrfToken = response.headers['x-csrf-token'];
        }
    }

    getCsrfToken() { return this._csrfToken; }

    /**
     * Executes the request
     *
     * @returns {object} response - The http response
     * @throws Throws an error if the request fails. the error may has an .response property.
     */
    async execute() {

        if (!this._csrf) return await super.execute();

        const reqOptions = this.getOptions();

        if (reqOptions && !reqOptions.headers) reqOptions.headers = {};
        if (!reqOptions.headers['x-csrf-token']) {
            reqOptions.headers['x-csrf-token'] = 'Fetch';
        }

        const response = await super.execute();

        let shouldFetchCsrfToken = false;

        if (this._csrf.assert) {
            shouldFetchCsrfToken = this._csrf.assert(response);
        } else if (this._csrf.fetchOnStatusCodes) {
            shouldFetchCsrfToken = this._csrf.fetchOnStatusCodes.includes(response.statusCode);
        } else {
            shouldFetchCsrfToken = [401, 403].includes(response.statusCode);
        }

        if (shouldFetchCsrfToken === true) {

            if (response.headers && response.headers['x-csrf-token'] && response.headers['x-csrf-token'].toLowerCase() !== 'fetch') {
                this.setCsrfToken(response, reqOptions);
                return super.execute();
            }

            const fetchTokenOptions = {
                url: this._csrf.url || reqOptions.url,
                method: this._csrf.method || 'HEAD',
                headers: reqOptions.headers
            };

            const csrfTokenResponse = await new CsrfTokenRequest(fetchTokenOptions).execute();
            this.setCsrfToken(csrfTokenResponse, reqOptions);

            return super.execute();
        }

        return response;

    }
}

module.exports = CsrfTokenRequest;

