/*
 * (c) Copyright 2015-2016 SAP SE. All rights reserved
 */

'use strict';
var utils = require("./utils");
module.exports = textmining;

function textmining(p)
{
  this._client = p.client;
  this._referenceTable = p.referenceTable.trim();
  this._referenceColumn = p.referenceColumn.trim();
}

textmining.prototype.initialize = function(p, callback) {

  var client = this._client;

  //check input parameter.
  if(p.configuration !== undefined && typeof p.configuration !== "string") {
    return callback(new Error("Parameter \"configuration\" has to be string."));
  }
  var referenceTableArray = this._referenceTable.replace(/"/g, '');
  referenceTableArray = referenceTableArray.split('.');
  var referenceIndex = p.referenceIndex.replace(/"/g, '');
  referenceIndex = referenceIndex.split('.');
  var initializeStmt = "ALTER FULLTEXT INDEX ";
  if(referenceIndex.length === 2)
    initializeStmt += "\"" + referenceIndex[0] + "\".\"" + referenceIndex[1] + "\"";
  else
    initializeStmt += "\"" + referenceTableArray[0] + "\".\"" + referenceIndex[0] + "\"";
  initializeStmt += " TEXT MINING ON TEXT MINING CONFIGURATION \'" + (p.configuration !== undefined?p.configuration:"DEFAULT.textminingconfig") + "\'";
  client.exec(initializeStmt, function(err) {
    if(err) {
      return callback(err);
    }
    utils.checkIndexQueue(client, referenceTableArray, function(err) {
      callback(err);
    });
  });
}

textmining.prototype.getRelatedDocuments = function(p, callback) {

  var client = this._client;

  //check input parameters.
  var checkError = utils.checkParameters("getRelatedDocuments", p, ["inputDocument", "principalComponents", "clustering", "language", "mimetype", "includeColumns", "correlationMatrix", "top", "threshold", "termTypeRestriction", "documentRestriction"]);
  if(checkError) {
    return callback(checkError);
  }

  var tempAlias = "TM_GET_RELATED_DOCUMENTS_TEMP_TABLE";
  var selectStmt = "SELECT 0 as \"id\"";

  //Construct SELECT statement
  var selectResult = ["TOTAL_TERM_COUNT as \"termCountTotal\" ", "TERM_COUNT as \"termCount\"", "SCORE as \"score\""];
  if(p.includeColumns !== undefined && p.includeColumns.length) {
    var length = p.includeColumns.length;
    for(var i = 0; i < length; i++) {
      selectResult.push(p.includeColumns[i]);
    }
  }
  if(p.clustering !== undefined) {
    selectResult.push("CLUSTER_LEVEL as \"clusteringLevel\"");
    selectResult.push("CLUSTER_LEFT as \"clusteringLeft\"");
    selectResult.push("CLUSTER_RIGHT as \"clusteringRight\"");
  }
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      selectResult.push("FACTORS[" + i.toString() + "] as \"factor" + i.toString() + "\"");
      selectResult.push("ROTATED_FACTORS[" + i.toString() + "] as \"rotation" + i.toString() + "\"");
    }
  }
  for(var i = 0; i < selectResult.length; ++i) {
    selectStmt += ", " + tempAlias + "." + selectResult[i];
  }

  //Construct FROM statement with TM SQL function.
  var stmt = " FROM TM_GET_RELATED_DOCUMENTS( DOCUMENT ";
  if(p.inputDocumentCondition !== undefined) {
    stmt += "IN FULLTEXT INDEX WHERE " + p.inputDocumentCondition.trim();
  }
  else {
    if(p.inputDocumentText !== undefined) {
      stmt += "\'" + p.inputDocumentText.trim() + "\'";
    }
    else if(p.inputDocumentSubquery !== undefined) {
      stmt += "(" + p.inputDocumentSubquery.trim() + ")";
    }
    if(p.language !== undefined) {
      stmt += " LANGUAGE \'" + p.language.trim() + "\'";
    }
    if(p.mimetype !== undefined) {
      stmt += " MIME TYPE \'" + p.mimetype.trim() + "\'";
    }
  }

  stmt += " SEARCH DISTINCT";
  stmt += " \"" + this._referenceColumn + "\"" + " FROM " + this._referenceTable;
  if(p.documentRestriction !== undefined && p.documentRestriction.trim()) {
    stmt += " WHERE " + p.documentRestriction.trim();
  }
  if(p.termTypeRestriction !== undefined && p.termTypeRestriction.trim()) {
    stmt += " WITH TERM TYPE \'" + p.termTypeRestriction.trim() + "\'";
  }
  stmt += " RETURN";
  if(p.principalComponents !== undefined) {
    stmt += " PRINCIPAL COMPONENTS " + p.principalComponents.toString();
  }
  if(p.clustering !== undefined)
    stmt += " CLUSTERING \'" + p.clustering.trim() + "\' ";
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true) {
    stmt += " CORRELATION";
  }
  stmt += " TOP ";
  stmt += p.top !== undefined?p.top.toString():"DEFAULT";
  stmt += " ";
  if(p.includeColumns !== undefined && p.includeColumns.length) {
    var length = p.includeColumns.length;
    for(var i = 0; i < length; i++) {
      stmt += p.includeColumns[i];
      if(i !== length - 1) {
        stmt += ", ";
      }
    }
  }
  stmt += ") AS " + tempAlias;
  if(p.threshold !== undefined)
    stmt += " WHERE " + tempAlias + ".SCORE >= " + p.threshold.toString();

  //result handling
  var resultToken = ["score"];
  if(p.clustering !== undefined)
    resultToken.push("clusteringLevel");
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      resultToken.push("factor" + i.toString());
      resultToken.push("rotation" + i.toString());
    }
  }

  //Execute SQL
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true) {
    client.exec("SELECT COUNT(*) as \"num\"" + stmt, function(err, rows) {
      if(err) {
        return callback(err);
      }
      var resultNum = rows[0].num;

      for(var i = 1; i <= resultNum; ++i) {
        selectStmt += ", " + tempAlias + ".CORRELATIONS[" + i.toString() + "] as \"correlation" + i.toString() + "\"";
        resultToken.push("correlation" + i.toString())
      }

      client.exec(selectStmt + stmt, function(err, result) {
        if(err) {
          return callback(err);
        }
        callback(err, utils.handleResults(result, resultToken));
      });
    });
  }
  else {
    client.exec(selectStmt + stmt, function(err, result) {
      if(err) {
        return callback(err);
      }
      callback(err, utils.handleResults(result, resultToken));
    });
  }
}

textmining.prototype.getRelatedTerms = function(p, callback) {

  var client = this._client;

  //check input parameters.
  var checkError = utils.checkParameters("getRelatedTerms", p, ['inputTerm', 'principalComponents', 'clustering', 'correlationMatrix', 'top', 'threshold', 'termTypeRestriction', 'documentRestriction']);
  if(checkError) {
    return callback(checkError);
  }

  var tempAlias = "TM_GET_RELATED_TERMS_TEMP_TABLE";
  var selectStmt = "SELECT 0 as \"id\"";

  //Construct SELECT statement
  var selectResult = ["TERM as \"term\" ", "NORMALIZED_TERM as \"termNormalized\"", "TERM_TYPE as \"termType\"", "TERM_FREQUENCY as \"frequencyTotal\"", "DOCUMENT_FREQUENCY as \"frequencyDocumentCount\"", "SCORE as \"score\""];
  if(p.clustering !== undefined) {
    selectResult.push("CLUSTER_LEVEL as \"clusteringLevel\"");
    selectResult.push("CLUSTER_LEFT as \"clusteringLeft\"");
    selectResult.push("CLUSTER_RIGHT as \"clusteringRight\"");
  }
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      selectResult.push("FACTORS[" + i.toString() + "] as \"factor" + i.toString() + "\"");
      selectResult.push("ROTATED_FACTORS[" + i.toString() + "] as \"rotation" + i.toString() + "\"");
    }
  }
  for(var i = 0; i < selectResult.length; ++i) {
    selectStmt += ", " + tempAlias + "." + selectResult[i];
  }

  //Construct FROM statement with TM SQL function.
  var stmt = " FROM TM_GET_RELATED_TERMS( TERM ";
  stmt += "\'" + p.inputTermText.trim() + "\'";

  stmt += " SEARCH DISTINCT";
  stmt += " \"" + this._referenceColumn + "\"" + " FROM " + this._referenceTable;
  if(p.documentRestriction !== undefined && p.documentRestriction.trim()) {
    stmt += " WHERE " + p.documentRestriction.trim();
  }
  if(p.termTypeRestriction !== undefined && p.termTypeRestriction.trim()) {
    stmt += " WITH TERM TYPE \'" + p.termTypeRestriction.trim() + "\'";
  }
  stmt += " RETURN";
  if(p.principalComponents !== undefined) {
    stmt += " PRINCIPAL COMPONENTS " + p.principalComponents.toString();
  }
  if(p.clustering !== undefined)
    stmt += " CLUSTERING \'" + p.clustering.trim() + "\' ";
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true) {
    stmt += " CORRELATION";
  }
  stmt += " TOP ";
  stmt += p.top !== undefined?p.top.toString():"DEFAULT";
  stmt += ") AS " + tempAlias;
  if(p.threshold !== undefined)
    stmt += " WHERE " + tempAlias + ".SCORE >= " + p.threshold.toString();

  //result handling
  var resultToken = ["score"];
  if(p.clustering !== undefined)
    resultToken.push("clusteringLevel");
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      resultToken.push("factor" + i.toString());
      resultToken.push("rotation" + i.toString());
    }
  }

  //Execute SQL
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true) {
    client.exec("SELECT COUNT(*) as \"num\"" + stmt, function(err, rows) {
      if(err) {
        return callback(err);
      }
      var resultNum = rows[0].num;

      for(var i = 1; i <= resultNum; ++i) {
        selectStmt += ", " + tempAlias + ".CORRELATIONS[" + i.toString() + "] as \"correlation" + i.toString() + "\"";
        resultToken.push("correlation" + i.toString())
      }

      client.exec(selectStmt + stmt, function(err, result) {
        if(err) {
          return callback(err);
        }
        callback(err, utils.handleResults(result, resultToken));
      });
    });
  }
  else {
    client.exec(selectStmt + stmt, function(err, result) {
      if(err) {
        return callback(err);
      }
      callback(err, utils.handleResults(result, resultToken));
    });
  }
}

textmining.prototype.categorizeKNN = function(p, callback) {

  var client = this._client;

  //check input parameters.
  var checkError = utils.checkParameters("categorizeKNN" ,p, ["inputDocument", "categorySets", "kNN", "language", "mimetype", "top", "threshold", "termTypeRestriction", "documentRestriction"]);
  if(checkError) {
    return callback(checkError);
  }

  var tempAlias = "TM_CATEGORIZE_KNN_TEMP_TABLE";
  var selectStmt = "SELECT * ";

  //Construct SELECT statement
  // Replaced with SELECT * up above as a temporary workaround for a SELECT bug in SQL parser
  // var selectResult = ["CATEGORY_COLUMN as \"categorySet\"", "CATEGORY_VALUE as \"category\"", "NEIGHBOR_COUNT as \"documentCount\"", "SCORE as \"score\""];
  // for(var i = 0; i < selectResult.length; ++i) {
    // selectStmt += tempAlias + "." + selectResult[i];
    // if(i !== selectResult.length -1)
      // selectStmt += ", ";
  // }

  //Construct FROM statement with TM SQL function.
  var stmt = " FROM TM_CATEGORIZE_KNN( DOCUMENT ";
  if(p.inputDocumentCondition !== undefined) {
    stmt += "IN FULLTEXT INDEX WHERE " + p.inputDocumentCondition.trim();
  }
  else {
    if(p.inputDocumentText !== undefined) {
      stmt += "\'" + p.inputDocumentText.trim() + "\'";
    }
    else if(p.inputDocumentSubquery !== undefined) {
      stmt += "(" + p.inputDocumentSubquery.trim() + ")";
    }
    if(p.language !== undefined) {
      stmt += " LANGUAGE \'" + p.language.trim() + "\'";
    }
    if(p.mimetype !== undefined) {
      stmt += " MIME TYPE \'" + p.mimetype.trim() + "\'";
    }
  }

 stmt += " SEARCH NEAREST NEIGHBORS " + (p.kNN !== undefined?p.kNN.toString():"DEFAULT");
  stmt += " \"" + this._referenceColumn + "\"" + " FROM " + this._referenceTable;
  if(p.documentRestriction !== undefined && p.documentRestriction.trim()) {
    stmt += " WHERE " + p.documentRestriction.trim();
  }
  if(p.termTypeRestriction !== undefined && p.termTypeRestriction.trim()) {
    stmt += " WITH TERM TYPE \'" + p.termTypeRestriction.trim() + "\'";
  }
  for(var i = 0; i < p.categorySets.length ; ++i) {
    stmt += " RETURN TOP " + (p.top !== undefined? p.top.toString() : "DEFAULT") + " " + p.categorySets[i] + " FROM " + this._referenceTable;
  }

  stmt += ") AS " + tempAlias;
  if(p.threshold !== undefined)
    stmt += " WHERE " + tempAlias + ".SCORE >= " + p.threshold.toString();

  //result handling
  var resultToken = ["score"];

  //Execute SQL
  client.exec(selectStmt + stmt, function(err, result) {
    if(err) {
      return callback(err);
    }
    // This renames output columns to what SELECT used to do with the 4 columns it got
    for(var i=0; i < result.length; ++i) {
        result[i] = {
            categorySet: result[i].CATEGORY_COLUMN,
            category: result[i].CATEGORY_VALUE,
            documentCount: result[i].NEIGHBOR_COUNT,
            score: result[i].SCORE
        }
    }
    callback(err, utils.handleResults(result, resultToken));
  });
}

textmining.prototype.getRelevantTerms = function(p, callback) {

  var client = this._client;

  //check input parameters.
  var checkError = utils.checkParameters("getRelevantTerms", p, ["inputDocument", "principalComponents", "clustering", "language", "mimetype", "correlationMatrix", "top", "threshold", "termTypeRestriction", "documentRestriction"]);
  if(checkError) {
    return callback(checkError);
  }

  var tempAlias = "TM_GET_RELEVANT_TERMS_TEMP_TABLE";
  var selectStmt = "SELECT 0 as \"id\"";

  //Construct SELECT statement
  var selectResult = ["TERM as \"term\" ", "NORMALIZED_TERM as \"termNormalized\"", "TERM_TYPE as \"termType\"", "TERM_FREQUENCY as \"frequencyTotal\"", "DOCUMENT_FREQUENCY as \"frequencyDocumentCount\"", "SCORE as \"score\""];
  if(p.clustering !== undefined) {
    selectResult.push("CLUSTER_LEVEL as \"clusteringLevel\"");
    selectResult.push("CLUSTER_LEFT as \"clusteringLeft\"");
    selectResult.push("CLUSTER_RIGHT as \"clusteringRight\"");
  }
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      selectResult.push("FACTORS[" + i.toString() + "] as \"factor" + i.toString() + "\"");
      selectResult.push("ROTATED_FACTORS[" + i.toString() + "] as \"rotation" + i.toString() + "\"");
    }
  }
  for(var i = 0; i < selectResult.length; ++i) {
    selectStmt += ", " + tempAlias + "." + selectResult[i];
  }

  //Construct FROM statement with TM SQL function.
  var stmt = " FROM TM_GET_RELEVANT_TERMS( DOCUMENT ";
  if(p.inputDocumentCondition !== undefined) {
    stmt += "IN FULLTEXT INDEX WHERE " + p.inputDocumentCondition.trim();
  }
  else {
    if(p.inputDocumentText !== undefined) {
      stmt += "\'" + p.inputDocumentText.trim() + "\'";
    }
    else if(p.inputDocumentSubquery !== undefined) {
      stmt += "(" + p.inputDocumentSubquery.trim() + ")";
    }
    if(p.language !== undefined) {
      stmt += " LANGUAGE \'" + p.language.trim() + "\'";
    }
    if(p.mimetype !== undefined) {
      stmt += " MIME TYPE \'" + p.mimetype.trim() + "\'";
    }
  }

  stmt += " SEARCH DISTINCT";
  stmt += " \"" + this._referenceColumn + "\"" + " FROM " + this._referenceTable;
  if(p.documentRestriction !== undefined && p.documentRestriction.trim()) {
    stmt += " WHERE " + p.documentRestriction.trim();
  }
  if(p.termTypeRestriction !== undefined && p.termTypeRestriction.trim()) {
    stmt += " WITH TERM TYPE \'" + p.termTypeRestriction.trim() + "\'";
  }
  stmt += " RETURN";
  if(p.principalComponents !== undefined)
    stmt += " PRINCIPAL COMPONENTS " + p.principalComponents.toString();
  if(p.clustering !== undefined)
    stmt += " CLUSTERING \'" + p.clustering.trim() + "\' ";
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true)
    stmt += " CORRELATION";
  stmt += " TOP ";
  stmt += p.top !== undefined?p.top.toString():"DEFAULT";
  stmt += ") AS " + tempAlias;
  if(p.threshold !== undefined)
    stmt += " WHERE " + tempAlias + ".SCORE >= " + p.threshold.toString();

  //result handling
  var resultToken = ["score"];
  if(p.clustering !== undefined)
    resultToken.push("clusteringLevel");
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      resultToken.push("factor" + i.toString());
      resultToken.push("rotation" + i.toString());
    }
  }

  //Execute SQL
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true) {
    client.exec("SELECT COUNT(*) as \"num\"" + stmt, function(err, rows) {
      if(err) {
        return callback(err);
      }
      var resultNum = rows[0].num;

      for(var i = 1; i <= resultNum; ++i) {
        selectStmt += ", " + tempAlias + ".CORRELATIONS[" + i.toString() + "] as \"correlation" + i.toString() + "\"";
        resultToken.push("correlation" + i.toString())
      }

      client.exec(selectStmt + stmt, function(err, result) {
        if(err) {
          return callback(err);
        }
        callback(err, utils.handleResults(result, resultToken));
      });
    });
  }
  else {
    client.exec(selectStmt + stmt, function(err, result) {
      if(err) {
        return callback(err);
      }
      callback(err, utils.handleResults(result, resultToken));
    });
  }
}

textmining.prototype.getRelevantDocuments = function(p, callback) {

  var client = this._client;

  //check input parameters.
  var checkError = utils.checkParameters("getRelevantDocuments", p, ["inputTerm", "principalComponents", "clustering", "includeColumns", "correlationMatrix", "top", "threshold", "termTypeRestriction", "documentRestriction"]);
  if(checkError) {
    return callback(checkError);
  }

  var tempAlias = "TM_GET_RELATED_DOCUMENTS_TEMP_TABLE";
  var selectStmt = "SELECT 0 as \"id\"";

  //Construct SELECT statement
  var selectResult = ["TOTAL_TERM_COUNT as \"termCountTotal\" ", "TERM_COUNT as \"termCount\"", "SCORE as \"score\""];
  if(p.includeColumns !== undefined && p.includeColumns.length) {
    var length = p.includeColumns.length;
    for(var i = 0; i < length; i++) {
      selectResult.push(p.includeColumns[i].trim());
    }
  }
  if(p.clustering !== undefined) {
    selectResult.push("CLUSTER_LEVEL as \"clusteringLevel\"");
    selectResult.push("CLUSTER_LEFT as \"clusteringLeft\"");
    selectResult.push("CLUSTER_RIGHT as \"clusteringRight\"");
  }
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      selectResult.push("FACTORS[" + i.toString() + "] as \"factor" + i.toString() + "\"");
      selectResult.push("ROTATED_FACTORS[" + i.toString() + "] as \"rotation" + i.toString() + "\"");
    }
  }
  for(var i = 0; i < selectResult.length; ++i) {
    selectStmt += ", " + tempAlias + "." + selectResult[i];
  }

  //Construct FROM statement with TM SQL function.
  var stmt = " FROM TM_GET_RELEVANT_DOCUMENTS( TERM ";
  stmt += "\'" + p.inputTermText.trim() + "\'";

  stmt += " SEARCH DISTINCT";
  stmt += " \"" + this._referenceColumn + "\"" + " FROM " + this._referenceTable;
  if(p.documentRestriction !== undefined && p.documentRestriction.trim()) {
    stmt += " WHERE " + p.documentRestriction.trim();
  }
  if(p.termTypeRestriction !== undefined && p.termTypeRestriction.trim()) {
    stmt += " WITH TERM TYPE \'" + p.termTypeRestriction.trim() + "\'";
  }
  stmt += " RETURN";
  if(p.principalComponents !== undefined) {
    stmt += " PRINCIPAL COMPONENTS " + p.principalComponents.toString();
  }
  if(p.clustering !== undefined)
    stmt += " CLUSTERING \'" + p.clustering.trim() + "\' ";
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true) {
    stmt += " CORRELATION";
  }
  stmt += " TOP ";
  stmt += p.top !== undefined?p.top.toString():"DEFAULT";
  stmt += " ";
  if(p.includeColumns !== undefined && p.includeColumns.length) {
    var length = p.includeColumns.length;
    for(var i = 0; i < length; i++) {
      stmt += p.includeColumns[i];
      if(i !== length - 1) {
        stmt += ", ";
      }
    }
  }
  stmt += ") AS " + tempAlias;
  if(p.threshold !== undefined)
    stmt += " WHERE " + tempAlias + ".SCORE >= " + p.threshold.toString();

  //result handling
  var resultToken = ["score"];
  if(p.clustering !== undefined)
    resultToken.push("clusteringLevel");
  if(p.principalComponents !== undefined && p.principalComponents > 0) {
    for(var i = 1; i <=  p.principalComponents; ++i) {
      resultToken.push("factor" + i.toString());
      resultToken.push("rotation" + i.toString());
    }
  }

  //Execute SQL
  if(p.correlationMatrix !== undefined && p.correlationMatrix === true) {
    client.exec("SELECT COUNT(*) as \"num\"" + stmt, function(err, rows) {
      if(err) {
        return callback(err);
      }
      var resultNum = rows[0].num;

      for(var i = 1; i <= resultNum; ++i) {
        selectStmt += ", " + tempAlias + ".CORRELATIONS[" + i.toString() + "] as \"correlation" + i.toString() + "\"";
        resultToken.push("correlation" + i.toString())
      }

      client.exec(selectStmt + stmt, function(err, result) {
        if(err) {
          return callback(err);
        }
        callback(err, utils.handleResults(result, resultToken));
      });
    });
  }
  else {
    client.exec(selectStmt + stmt, function(err, result) {
      if(err) {
        return callback(err);
      }
      callback(err, utils.handleResults(result, resultToken));
    });
  }
}

textmining.prototype.getSuggestedTerms = function(p, callback) {

  var client = this._client;

  //check input parameters.
  var checkError = utils.checkParameters("getSuggestedTerms", p, ["inputTerm", "top", "threshold", "termTypeRestriction", "documentRestriction"]);
  if(checkError) {
    return callback(checkError);
  }

  var tempAlias = "TM_GET_SUGGESTED_TERMS_TEMP_TABLE";
  var selectStmt = "SELECT 0 as \"id\"";

  //Construct SELECT statement
  var selectResult = ["TERM as \"term\" ", "NORMALIZED_TERM as \"termNormalized\"", "TERM_TYPE as \"termType\"", "TERM_FREQUENCY as \"frequencyTotal\"", "DOCUMENT_FREQUENCY as \"frequencyDocumentCount\"", "SCORE as \"score\""];
  for(var i = 0; i < selectResult.length; ++i) {
    selectStmt += ", " + tempAlias + "." + selectResult[i];
  }

  //Construct FROM statement with TM SQL function.
  var stmt = " FROM TM_GET_SUGGESTED_TERMS( TERM ";
  stmt += "\'" + p.inputTermText.trim() + "\'";

  stmt += " SEARCH DISTINCT";
  stmt += " \"" + this._referenceColumn + "\"" + " FROM " + this._referenceTable;
  if(p.documentRestriction !== undefined && p.documentRestriction.trim()) {
    stmt += " WHERE " + p.documentRestriction.trim();
  }
  if(p.termTypeRestriction !== undefined && p.termTypeRestriction.trim()) {
    stmt += " WITH TERM TYPE \'" + p.termTypeRestriction.trim() + "\'";
  }
  stmt += " RETURN";
  stmt += " TOP ";
  stmt += p.top !== undefined?p.top.toString():"DEFAULT";
  stmt += ") AS " + tempAlias;
  if(p.threshold !== undefined) {
    stmt += " WHERE " + tempAlias + ".SCORE >= " + p.threshold.toString();
  }

  //result handling
  var resultToken = ["score"];

  //Execute SQL
  client.exec(selectStmt + stmt, function(err, result) {
    if(err) {
      return callback(err);
    }
    callback(err, utils.handleResults(result, resultToken));
  });
}
