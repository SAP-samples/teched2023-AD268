'use strict';

const loggingUtils = require('./../utils/logger');
const tracer = loggingUtils.getTracer(__filename);
const querystring = require('querystring');
const url = require('url');
const VError = require('verror').VError;

function setPropertiesToRequest(req, app) {
  req.app = app;
  req.protocol = req.connection.encrypted ? 'https' : 'http';
  req.query = querystring.parse(url.parse(req.url).query || ''); // needed by passport-oauth
}

function validateHeaders(req) {
  const reqHeaders = req.headers;
  const routerConfig = req.routerConfig || (req.app ? req.app.get('mainRouterConfig') : null);

  if (reqHeaders['x-forwarded-host']) {
    if (!isValidXFwdHost(reqHeaders['x-forwarded-host'], routerConfig)) {
      return new VError('Failed to validate x-forwarded-host:' + reqHeaders['x-forwarded-host']);
    }
  }
  return null;
}

function isValidXFwdHost(fwdHostHeader, routerConfig) {
  if (!routerConfig || !routerConfig.enableXForwardHostValidation) {
    // Will run validation if explicitly set to true
    tracer.info('x-forwarded-host header will not be validated');
    return true;
  }

  const lastColonIndex = fwdHostHeader.lastIndexOf(':');
  let hostname, port;
  if (lastColonIndex !== -1) {
    hostname = fwdHostHeader.slice(0, lastColonIndex);
    port = fwdHostHeader.slice(lastColonIndex + 1);
  } else {
    hostname = fwdHostHeader;
  }
  return isHostnameValid(hostname) && isPortValid(port);
}

function isPortValid(port) {
  const portRegexExp = /^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/g;
  return port ? portRegexExp.test(port) : true;
}

function isHostnameValid(hostname) {
  // Check also for underscore
  const hostnameRegExp = /^[a-z0-9-_.]{1,253}\.?$/gi;
  if (!hostnameRegExp.test(hostname)) {
    return false;
  }
  // Trailing dot, if any, is not counted in the hostname max length limitation
  if (hostname.endsWith('.')) {
    hostname = hostname.slice(0, -1);
  }

  // Split hostname if it has dots
  const hostnameParts = hostname.split('.');
  const maxPartLength = 64;
  const hostnamePartRegExp = /^[a-z0-9-_]+$/gi;
  const validHostname = hostnameParts.every((part) => {
    hostnamePartRegExp.lastIndex = 0;
    return part.length < maxPartLength && hostnamePartRegExp.test(part);
  });
  return validHostname;
}

module.exports = {
  setPropertiesToRequest, validateHeaders, isPortValid, isHostnameValid
};
