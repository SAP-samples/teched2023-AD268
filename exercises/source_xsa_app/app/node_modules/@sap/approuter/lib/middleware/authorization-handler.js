'use strict';
const urlUtils   = require('../utils/url-utils');
const uaaUtils   = require('../utils/uaa-utils');
const loggerUtil = require('../utils/logger');
const logger     = loggerUtil.getLogger('/authorization-handler');

module.exports = function checkAuthorization(req) {
  if (!req.internalUrl || req.internalUrl.route.authenticationType === 'none') {
    return {isAuthorized: true};
  }

  const scopesMessage = 'You do not have the required scopes to access this resource.';
  const tenantMessage = 'You cannot use session from another tenant.';
  const loggingData = loggerUtil.getAuditLogAdditionalData(req);
  let auditLogMessage;

  const uaaConfig = req.routerConfig && req.routerConfig.uaaConfig;
  const tenantMode = uaaConfig && uaaConfig.options && uaaConfig.options.tenantmode;

  if (tenantMode === 'shared') {
    const tenantHostPattern = uaaConfig && uaaConfig.tenantHostPattern;
    if (tenantHostPattern) {
      const urlTenant = uaaUtils.retrieveTenantFromURL(urlUtils.getAppRouterHost(req), tenantHostPattern);
      if (urlTenant && req.session && req.session.user && req.session.user.tenant &&
        urlTenant !== req.session.user.tenant) {
        auditLogMessage = 'User not authorized, IP: ' +
          loggingData.IP + ',  JWT token tenant: ' + req.session.user.tenant + ', URL tenant: ' + urlTenant;
        loggerUtil.writeToAuditLog(req, loggingData, auditLogMessage, function (err)  {
          if (err) {
            logger.error(err,'Failed to write to audit log');
          }
        });
        return {isAuthorized: false, message: tenantMessage};
      }
    }
  }

  let routeScopes = req.internalUrl.route.scope;
  if (!routeScopes) {
    return {isAuthorized: true};
  }
  if (!Array.isArray(routeScopes)) {
    routeScopes = routeScopes[req.method] || routeScopes.default || [];
  }
  // managed approuter
  const bsScopes = req.session && req.session.user && req.destinationCredentials && req.destinationCredentials.uniqueServiceName
    && req.session.user.businessServices && req.session.user.businessServices[req.destinationCredentials.uniqueServiceName] &&
      req.session.user.businessServices[req.destinationCredentials.uniqueServiceName].scopes;
  // standalone approuter
  let oauthScopes = req.session && req.session.user && req.session.user.scopes;
  oauthScopes = bsScopes ? bsScopes : oauthScopes;
  if (!oauthScopes) {
    auditLogMessage = 'User not authorized, the token does not contain scopes, source of route: ' + req.internalUrl.route.source + ', IP: ' +
        loggingData.IP + ',  required scopes: ' + routeScopes + ', user scopes (are missing): ' + oauthScopes;
    loggerUtil.writeToAuditLog(req, loggingData, auditLogMessage, function (err)  {
      if (err) {
        logger.error(err,'Failed to write to audit log');
      }
    });
    return {isAuthorized: false, message: scopesMessage};
  }

  const isAuthorized = routeScopes.some(function (element) {
    return oauthScopes.indexOf(element) > -1;
  });
  const result = {isAuthorized: isAuthorized};

  if (!isAuthorized) {
    auditLogMessage = 'User not authorized, source of route: ' + req.internalUrl.route.source + ', IP: ' +
      loggingData.IP + ',  required scopes: ' + routeScopes + ', user scopes: ' + oauthScopes;
    loggerUtil.writeToAuditLog(req, loggingData, auditLogMessage, function (err)  {
      if (err) {
        logger.error(err,'Failed to write to audit log');
      }
    });
    result.message = scopesMessage;
  }

  return result;
};

